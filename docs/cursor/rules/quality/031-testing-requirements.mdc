---
description: "Ursa Minor Games - Testing Standards and Requirements"
globs: "tests/**/*.php,phpunit.xml"
---

# Testing Requirements

## Testing Philosophy

### Core Principles

- **Test First**: Write tests before or alongside feature development
- **80%+ Coverage**: Aim for 80% or higher code coverage
- **Test Locally**: Run tests before committing
- **Test Before Merge**: Always run full test suite before merging branches
- **Fast Tests**: Keep test suite fast for frequent execution

### What to Test

**DO Test**:
- All business logic
- API endpoints (when added)
- Database operations
- User authentication flows
- Critical user journeys
- Edge cases and error conditions
- Security-sensitive operations

**DON'T Test**:
- Framework code (trust Laravel)
- Third-party packages
- Simple getters/setters
- Configuration files

## Test Structure

### Directory Organization

```
tests/
├── Feature/          # End-to-end feature tests
│   ├── GameManagementTest.php
│   └── UserAuthenticationTest.php
├── Unit/            # Isolated unit tests
│   ├── Services/
│   │   └── GameServiceTest.php
│   └── Models/
│       └── GameTest.php
└── TestCase.php     # Base test case
```

### Feature Tests

Test complete user workflows and HTTP requests:

```php
<?php

namespace Tests\Feature;

use Tests\TestCase;
use App\Models\User;
use App\Models\Game;
use Illuminate\Foundation\Testing\RefreshDatabase;

class GameManagementTest extends TestCase
{
    use RefreshDatabase;
    
    /** @test */
    public function authenticated_user_can_view_games_page(): void
    {
        $user = User::factory()->create();
        
        $response = $this->actingAs($user)
            ->get(route('games.index'));
        
        $response->assertOk();
        $response->assertViewIs('games.index');
    }
    
    /** @test */
    public function guest_cannot_create_game(): void
    {
        $response = $this->post(route('games.store'), [
            'name' => 'Test Game',
            'description' => 'Test description',
        ]);
        
        $response->assertRedirect(route('login'));
    }
    
    /** @test */
    public function user_can_create_game_with_valid_data(): void
    {
        $user = User::factory()->create();
        
        $gameData = [
            'name' => 'Chess',
            'description' => 'Classic chess game',
            'status' => 'draft',
        ];
        
        $response = $this->actingAs($user)
            ->post(route('games.store'), $gameData);
        
        $response->assertRedirect();
        $this->assertDatabaseHas('games', [
            'name' => 'Chess',
            'user_id' => $user->id,
        ]);
    }
    
    /** @test */
    public function user_cannot_create_game_with_invalid_data(): void
    {
        $user = User::factory()->create();
        
        $response = $this->actingAs($user)
            ->post(route('games.store'), [
                'name' => '', // Invalid: empty name
            ]);
        
        $response->assertSessionHasErrors(['name']);
    }
}
```

### Unit Tests

Test isolated units of code:

```php
<?php

namespace Tests\Unit\Services;

use Tests\TestCase;
use App\Models\Game;
use App\Services\GameService;
use App\Repositories\GameRepository;
use Mockery;

class GameServiceTest extends TestCase
{
    /** @test */
    public function it_creates_game_with_valid_data(): void
    {
        $repository = Mockery::mock(GameRepository::class);
        $service = new GameService($repository);
        
        $gameData = [
            'name' => 'Test Game',
            'description' => 'Test description',
        ];
        
        $repository->shouldReceive('create')
            ->once()
            ->with($gameData)
            ->andReturn(new Game($gameData));
        
        $game = $service->createGame($gameData);
        
        $this->assertEquals('Test Game', $game->name);
    }
    
    /** @test */
    public function it_gets_active_games(): void
    {
        $games = Game::factory()->count(3)->create([
            'is_active' => true,
        ]);
        
        $inactiveGame = Game::factory()->create([
            'is_active' => false,
        ]);
        
        $activeGames = Game::active()->get();
        
        $this->assertCount(3, $activeGames);
        $this->assertFalse($activeGames->contains($inactiveGame));
    }
}
```

### Model Tests

Test model behavior:

```php
<?php

namespace Tests\Unit\Models;

use Tests\TestCase;
use App\Models\Game;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;

class GameTest extends TestCase
{
    use RefreshDatabase;
    
    /** @test */
    public function it_belongs_to_user(): void
    {
        $user = User::factory()->create();
        $game = Game::factory()->create(['user_id' => $user->id]);
        
        $this->assertInstanceOf(User::class, $game->user);
        $this->assertEquals($user->id, $game->user->id);
    }
    
    /** @test */
    public function it_has_active_scope(): void
    {
        Game::factory()->count(2)->create(['is_active' => true]);
        Game::factory()->create(['is_active' => false]);
        
        $activeGames = Game::active()->get();
        
        $this->assertCount(2, $activeGames);
    }
    
    /** @test */
    public function is_live_returns_true_for_published_active_game(): void
    {
        $game = Game::factory()->create([
            'status' => 'published',
            'is_active' => true,
            'published_at' => now()->subDay(),
        ]);
        
        $this->assertTrue($game->isLive());
    }
    
    /** @test */
    public function is_live_returns_false_for_draft_game(): void
    {
        $game = Game::factory()->create([
            'status' => 'draft',
            'is_active' => true,
        ]);
        
        $this->assertFalse($game->isLive());
    }
}
```

## Test Data

### Factories

Use factories for test data:

```php
<?php

namespace Database\Factories;

use App\Models\User;
use Illuminate\Database\Eloquent\Factories\Factory;

class GameFactory extends Factory
{
    public function definition(): array
    {
        return [
            'user_id' => User::factory(),
            'name' => $this->faker->words(3, true),
            'description' => $this->faker->paragraph(),
            'status' => $this->faker->randomElement(['draft', 'published']),
            'is_active' => true,
            'published_at' => null,
        ];
    }
    
    /**
     * Indicate that the game is published.
     */
    public function published(): static
    {
        return $this->state(fn (array $attributes) => [
            'status' => 'published',
            'published_at' => now()->subDay(),
        ]);
    }
    
    /**
     * Indicate that the game is inactive.
     */
    public function inactive(): static
    {
        return $this->state(fn (array $attributes) => [
            'is_active' => false,
        ]);
    }
}
```

**Usage**:

```php
// Create single game
$game = Game::factory()->create();

// Create multiple games
$games = Game::factory()->count(5)->create();

// Create with specific attributes
$game = Game::factory()->create([
    'name' => 'Chess',
    'status' => 'published',
]);

// Use states
$publishedGame = Game::factory()->published()->create();
$inactiveGame = Game::factory()->inactive()->create();
```

## Test Helpers

### Base Test Case

```php
<?php

namespace Tests;

use Illuminate\Foundation\Testing\TestCase as BaseTestCase;

abstract class TestCase extends BaseTestCase
{
    use CreatesApplication;
    
    /**
     * Set up the test.
     */
    protected function setUp(): void
    {
        parent::setUp();
        
        // Common setup for all tests
    }
    
    /**
     * Create authenticated user and act as them.
     */
    protected function actingAsUser(?User $user = null): User
    {
        $user = $user ?? User::factory()->create();
        $this->actingAs($user);
        
        return $user;
    }
}
```

## Assertions

### Common Assertions

```php
// Database assertions
$this->assertDatabaseHas('games', ['name' => 'Chess']);
$this->assertDatabaseMissing('games', ['name' => 'Invalid']);
$this->assertDatabaseCount('games', 3);

// Model assertions
$this->assertModelExists($game);
$this->assertModelMissing($deletedGame);

// Response assertions
$response->assertOk();
$response->assertRedirect(route('games.index'));
$response->assertViewIs('games.show');
$response->assertViewHas('game');
$response->assertSessionHas('success');
$response->assertSessionHasErrors(['name']);

// Collection assertions
$this->assertCount(3, $games);
$this->assertTrue($games->contains($game));
$this->assertEmpty($games);

// Value assertions
$this->assertEquals('Chess', $game->name);
$this->assertTrue($game->isActive());
$this->assertNull($game->published_at);
$this->assertInstanceOf(User::class, $game->user);
```

## Running Tests

### Command Line

```powershell
# Run all tests
php artisan test

# Run specific test file
php artisan test tests/Feature/GameManagementTest.php

# Run specific test method
php artisan test --filter=test_user_can_create_game

# Run with coverage
php artisan test --coverage

# Run with minimum coverage
php artisan test --coverage --min=80

# Parallel testing
php artisan test --parallel
```

### Test Output

```powershell
# Verbose output
php artisan test --verbose

# Show test times
php artisan test --profile

# Stop on failure
php artisan test --stop-on-failure
```

## Database Testing

### RefreshDatabase Trait

Use for tests that interact with the database:

```php
<?php

namespace Tests\Feature;

use Tests\TestCase;
use Illuminate\Foundation\Testing\RefreshDatabase;

class GameTest extends TestCase
{
    use RefreshDatabase;
    
    /** @test */
    public function it_works(): void
    {
        // Database is migrated fresh for each test
    }
}
```

### Transactions

For faster tests when seeders aren't needed:

```php
use Illuminate\Foundation\Testing\DatabaseTransactions;

class GameTest extends TestCase
{
    use DatabaseTransactions;
    
    // Tests run in transaction and rolled back
}
```

## Mocking

### Mocking Dependencies

```php
use Mockery;

/** @test */
public function it_uses_repository(): void
{
    $repository = Mockery::mock(GameRepository::class);
    
    $repository->shouldReceive('findActive')
        ->once()
        ->andReturn(collect([
            new Game(['name' => 'Chess']),
        ]));
    
    $service = new GameService($repository);
    $games = $service->getActiveGames();
    
    $this->assertCount(1, $games);
}
```

### Mocking Facades

```php
use Illuminate\Support\Facades\Cache;

/** @test */
public function it_caches_games(): void
{
    Cache::shouldReceive('remember')
        ->once()
        ->with('active_games', 3600, Mockery::type('Closure'))
        ->andReturn(collect());
    
    $games = $service->getActiveGames();
}
```

## Testing Best Practices

### Naming

```php
// ✅ DO - Descriptive test names
/** @test */
public function user_can_create_game_with_valid_data(): void

/** @test */
public function guest_cannot_access_admin_panel(): void

// ❌ DON'T - Unclear test names
/** @test */
public function test1(): void

/** @test */
public function it_works(): void
```

### Arrange, Act, Assert

```php
/** @test */
public function user_can_delete_own_game(): void
{
    // Arrange
    $user = User::factory()->create();
    $game = Game::factory()->create(['user_id' => $user->id]);
    
    // Act
    $response = $this->actingAs($user)
        ->delete(route('games.destroy', $game));
    
    // Assert
    $response->assertRedirect();
    $this->assertModelMissing($game);
}
```

### One Assertion per Test (When Possible)

```php
// ✅ DO - Focused tests
/** @test */
public function game_has_name(): void
{
    $game = Game::factory()->create(['name' => 'Chess']);
    
    $this->assertEquals('Chess', $game->name);
}

/** @test */
public function game_belongs_to_user(): void
{
    $user = User::factory()->create();
    $game = Game::factory()->create(['user_id' => $user->id]);
    
    $this->assertEquals($user->id, $game->user_id);
}
```

### Test Independence

```php
// ✅ DO - Tests don't depend on each other
/** @test */
public function test_a(): void
{
    $game = Game::factory()->create();
    // Test logic
}

/** @test */
public function test_b(): void
{
    $game = Game::factory()->create();
    // Test logic - doesn't depend on test_a
}
```

## Testing Checklist

Before committing code:

### Feature Tests

- [ ] Test successful user flows
- [ ] Test authentication/authorization
- [ ] Test validation errors
- [ ] Test edge cases
- [ ] Test error handling

### Unit Tests

- [ ] Test public methods
- [ ] Test business logic
- [ ] Test edge cases
- [ ] Test error conditions
- [ ] Mock external dependencies

### Coverage

- [ ] Run tests: `php artisan test`
- [ ] Check coverage: `php artisan test --coverage`
- [ ] Aim for 80%+ coverage
- [ ] All tests passing

### Quality

- [ ] Tests are fast
- [ ] Tests are independent
- [ ] Tests are descriptive
- [ ] No skipped tests
- [ ] No commented out tests

## CI/CD Integration

### Railway Deployment

Tests should run before deployment:

```yaml
# .github/workflows/tests.yml (future)
name: Tests

on: [push, pull_request]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v2
      
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.3
      
      - name: Install Dependencies
        run: composer install
      
      - name: Run Tests
        run: php artisan test --coverage --min=80
```

## Testing Anti-Patterns

### Avoid

- **Testing Framework Code**: Don't test Laravel's built-in features
- **Testing Third-Party Code**: Trust package tests
- **Over-Mocking**: Mock only external dependencies
- **Testing Implementation Details**: Test behavior, not implementation
- **Fragile Tests**: Tests that break with minor changes
- **Slow Tests**: Optimize database operations
- **Dependent Tests**: Each test should be independent
- **Untested Happy Path**: Always test the expected behavior

## Coverage Goals

### Minimum Requirements

- **Overall Coverage**: 80%+
- **Critical Business Logic**: 95%+
- **Controllers**: 70%+
- **Models**: 80%+
- **Services**: 90%+
- **Repositories**: 80%+

### Coverage Report

```powershell
# Generate coverage report
php artisan test --coverage

# HTML coverage report (future)
php artisan test --coverage-html coverage/
```

## Testing Workflow

### Development Cycle

1. **Write Failing Test**: Red
   ```powershell
   php artisan test --filter=test_user_can_create_game
   ```

2. **Implement Feature**: Green
   ```php
   public function store(Request $request)
   {
       // Implementation
   }
   ```

3. **Run Test Again**: Passes
   ```powershell
   php artisan test --filter=test_user_can_create_game
   ```

4. **Refactor**: Improve code
   ```php
   public function store(StoreGameRequest $request)
   {
       $game = $this->gameService->create($request->validated());
   }
   ```

5. **Run All Tests**: Verify no regressions
   ```powershell
   php artisan test
   ```

6. **Commit**: With passing tests
   ```powershell
   git add .
   git commit -m "feat(games): add game creation"
   ```

## Documentation

### Test Documentation

```php
<?php

namespace Tests\Feature;

use Tests\TestCase;

/**
 * Game Management Tests
 * 
 * Tests for creating, reading, updating, and deleting games.
 */
class GameManagementTest extends TestCase
{
    /**
     * @test
     * 
     * Scenario: Authenticated user creates a game
     * Given: An authenticated user
     * When: User submits valid game data
     * Then: Game is created and saved to database
     */
    public function user_can_create_game_with_valid_data(): void
    {
        // Test implementation
    }
}
```

## Summary

### Key Principles

- Write tests before or alongside features
- Aim for 80%+ code coverage
- Test critical business logic thoroughly
- Keep tests fast and independent
- Run tests before committing
- Run full suite before merging
- Use factories for test data
- Follow Arrange-Act-Assert pattern
- Write descriptive test names
- Test behavior, not implementation
