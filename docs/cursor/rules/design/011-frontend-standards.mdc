---
description: "Ursa Minor Games - Frontend Development Standards"
globs: "resources/views/**/*.blade.php,public/**/*.{js,css}"
---

# Frontend Standards

## HTML Standards

### Semantic HTML5

**DO**:
- Use semantic elements (`<header>`, `<nav>`, `<main>`, `<article>`, `<section>`, `<footer>`)
- Use proper heading hierarchy (h1 → h2 → h3)
- Use `<button>` for actions, `<a>` for navigation
- Use `<form>` with proper input types
- Include alt text for all images
- Use descriptive `id` and `class` names

**DON'T**:
- Use `<div>` when a semantic element exists
- Skip heading levels (h1 → h3)
- Use inline styles
- Use inline JavaScript
- Include emoji in production code

### Blade Templates

**Structure**:
```blade
{{-- resources/views/page-name.blade.php --}}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{ $title ?? 'Ursa Minor Games' }}</title>
    <link rel="stylesheet" href="{{ asset('style.css') }}">
</head>
<body>
    {{-- Content --}}
    
    <script src="{{ asset('script.js') }}"></script>
</body>
</html>
```

**Guidelines**:
- Use Blade comments: `{{-- comment --}}`
- Use `{{ }}` for echoing (auto-escapes)
- Use `{!! !!}` only for trusted content
- Use `@csrf` in forms
- Use asset helpers: `asset()`, `@vite()`
- No inline JavaScript or CSS
- Extract reusable sections to components

### Accessibility

**Required**:
- WCAG 2.1 Level AA minimum
- Proper heading hierarchy
- Alt text for images
- ARIA labels where needed
- Keyboard navigation support
- Focus indicators visible
- Color contrast ratios met

**Testing**:
- Use keyboard to navigate
- Test with screen reader
- Verify color contrast
- Check focus indicators
- Test responsive design

## CSS Standards

### Organization

**File Structure**:
```css
/* ===== Base Styles ===== */
/* Root variables, box-sizing */

/* ===== Reset & Base Styles ===== */
/* Body, typography defaults */

/* ===== Scrollbar Styles ===== */
/* Custom scrollbar */

/* ===== Header & Navigation ===== */
/* Header, nav, menu */

/* ===== Logo & Branding ===== */
/* Logo, brand elements */

/* ===== Main Content ===== */
/* Main content area */

/* ===== Content Sections ===== */
/* Specific sections */

/* ===== Footer ===== */
/* Footer styles */

/* ===== Effects & Animations ===== */
/* Animations, transitions */

/* ===== Layout Helpers ===== */
/* Utility classes */
```

### Naming Conventions

**BEM-inspired**:
```css
/* Block */
.feature-card { }

/* Element */
.feature-card__title { }

/* Modifier */
.feature-card--highlighted { }
```

**Descriptive Names**:
- `.mission-section` not `.ms`
- `.feature-grid` not `.fg`
- `.nav-link` not `.nl`

### Best Practices

**DO**:
- Use CSS custom properties for repeated values
- Keep selectors specific but not overly specific
- Group related properties together
- Use shorthand properties when appropriate
- Comment complex or non-obvious styles
- Use consistent spacing and indentation
- Test responsive design

**DON'T**:
- Use `!important` (except rare cases)
- Use inline styles in HTML
- Over-nest selectors (max 3 levels)
- Use IDs for styling (use classes)
- Use deprecated properties
- Mix tabs and spaces

### Color Variables

```css
:root {
    --night-black: #000000;
    --midnight-blue: #001a33;
    --evening-blue: #002d58;
    --star-white: #ffffff;
    --star-yellow: #fff89a;
    --dark-overlay: rgba(0, 0, 0, 0.3);
    --light-overlay: rgba(255, 255, 255, 0.05);
    --muted-text: rgba(255, 255, 255, 0.7);
    --subtle-accent: rgba(255, 248, 154, 0.3);
}
```

### Responsive Design

**Mobile-First Approach**:
```css
/* Base styles (mobile) */
.feature-grid {
    display: grid;
    grid-template-columns: 1fr;
    gap: 1.5rem;
}

/* Tablet */
@media (min-width: 768px) {
    .feature-grid {
        grid-template-columns: repeat(2, 1fr);
    }
}

/* Desktop */
@media (min-width: 1024px) {
    .feature-grid {
        grid-template-columns: repeat(3, 1fr);
        gap: 2rem;
    }
}
```

**Breakpoints**:
- Mobile: < 768px
- Tablet: 768px - 1024px
- Desktop: > 1024px

### Animation Standards

**Subtle and Purposeful**:
```css
.feature:hover {
    transform: translateX(10px);
    box-shadow: 0 0 20px rgba(255, 248, 154, 0.3);
    transition: transform 0.3s ease, box-shadow 0.3s ease;
}
```

**Guidelines**:
- Use `ease` or `ease-in-out` for smooth transitions
- Duration: 0.2s-0.5s for hover effects, 1s for major animations
- Never use bounce or elastic (too playful)
- Respect `prefers-reduced-motion`

```css
@media (prefers-reduced-motion: reduce) {
    * {
        animation-duration: 0.01ms !important;
        transition-duration: 0.01ms !important;
    }
}
```

### Night Sky Effects

**Gradient Background**:
```css
body {
    background: linear-gradient(
        to bottom,
        #000000,
        #001a33,
        #002d58
    );
    min-height: 100vh;
}
```

**Backdrop Blur**:
```css
.card {
    background: rgba(255, 255, 255, 0.05);
    backdrop-filter: blur(5px);
    border-radius: 10px;
}
```

## JavaScript Standards

### Code Style

**Modern JavaScript**:
```javascript
// Use const/let, not var
const canvas = document.getElementById('starfield');
let stars = [];

// Arrow functions
const createStar = () => ({
    x: Math.random() * canvas.width,
    y: Math.random() * canvas.height,
    radius: Math.random() * 2 + 1
});

// Template literals
console.log(`Created ${stars.length} stars`);
```

**Best Practices**:
- Use strict mode: `'use strict';`
- Use descriptive variable names
- Add comments for complex logic
- Keep functions small and focused
- Use consistent indentation
- Handle errors gracefully

### DOM Manipulation

**Efficient Selection**:
```javascript
// Cache DOM queries
const header = document.querySelector('header');
const logo = document.querySelector('.logo-container img');

// Use event delegation
document.addEventListener('click', (e) => {
    if (e.target.matches('.feature')) {
        // Handle click
    }
});
```

**Performance**:
- Cache DOM queries
- Use `documentFragment` for multiple additions
- Minimize reflows and repaints
- Debounce scroll/resize handlers
- Use requestAnimationFrame for animations

### Event Handlers

**Clean Event Handling**:
```javascript
// Named functions for handlers
function handleScroll() {
    const scrolled = window.scrollY;
    
    if (scrolled > 100) {
        header.classList.add('scrolled');
    } else {
        header.classList.remove('scrolled');
    }
}

// Add listener
window.addEventListener('scroll', handleScroll);

// Cleanup when needed
window.removeEventListener('scroll', handleScroll);
```

**Debouncing**:
```javascript
function debounce(func, wait) {
    let timeout;
    return function executedFunction(...args) {
        const later = () => {
            clearTimeout(timeout);
            func(...args);
        };
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
    };
}

// Use for expensive operations
window.addEventListener('resize', debounce(handleResize, 250));
```

### Starfield Animation Pattern

**Canvas-Based Animation**:
```javascript
const canvas = document.getElementById('starfield');
const ctx = canvas.getContext('2d');

// Set canvas size
function resizeCanvas() {
    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;
}

// Animation loop
function animate() {
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    
    // Draw stars
    stars.forEach(star => {
        ctx.beginPath();
        ctx.arc(star.x, star.y, star.radius, 0, Math.PI * 2);
        ctx.fillStyle = star.blinking ? '#fff89a' : '#ffffff';
        ctx.fill();
    });
    
    requestAnimationFrame(animate);
}

animate();
```

### Comments

**Good Comments**:
```javascript
// Create starfield with random positions
// 60% of stars blink with randomized timing
function createStarfield() {
    const starCount = Math.floor((canvas.width * canvas.height) / 10000);
    
    for (let i = 0; i < starCount; i++) {
        stars.push({
            x: Math.random() * canvas.width,
            y: Math.random() * canvas.height,
            radius: Math.random() * 2 + 1,
            blinking: Math.random() < 0.6
        });
    }
}
```

## Asset Management

### Images

**Using Vite**:
```javascript
// In JavaScript
import logoUrl from '@images/logo.png';
```

**In Blade**:
```blade
<img src="{{ asset('bear.svg') }}" alt="Ursa Minor Games">
```

**Guidelines**:
- Use appropriate image formats (SVG for logos, WebP for photos)
- Provide alt text for all images
- Optimize image sizes
- Use lazy loading for below-fold images
- Use responsive images when needed

### Fonts

**Google Fonts Import**:
```html
<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link href="https://fonts.googleapis.com/css2?family=Oswald:wght@200;300;400;500;600;700&display=swap" rel="stylesheet">
```

**Font Display**:
- Use `font-display: swap` to prevent invisible text
- Preconnect to font providers
- Consider font loading strategies

## Component Patterns

### Feature Card

```html
<div class="feature">
    <h3>Feature Title</h3>
    <p>Feature description goes here...</p>
</div>
```

```css
.feature {
    background: rgba(255, 255, 255, 0.05);
    border-left: 4px solid #fff89a;
    border-radius: 10px;
    padding: 2rem;
    transition: transform 0.3s ease, box-shadow 0.3s ease;
    backdrop-filter: blur(5px);
}

.feature:hover {
    transform: translateX(10px);
    box-shadow: 0 0 20px rgba(255, 248, 154, 0.3);
}
```

### Section Container

```html
<section class="mission-section">
    <article>
        <h2>Section Title</h2>
        <p>Content goes here...</p>
    </article>
</section>
```

```css
.mission-section {
    padding: 4rem 2rem;
    margin: 2rem 0;
}

.mission-section article {
    background: rgba(0, 0, 0, 0.3);
    backdrop-filter: blur(10px);
    border-radius: 10px;
    padding: 3rem;
    max-width: 800px;
    margin: 0 auto;
}
```

## Performance Optimization

### CSS Performance

- Use efficient selectors
- Minimize expensive properties (box-shadow, filter)
- Use `will-change` sparingly
- Avoid layout thrashing
- Use CSS containment where appropriate

### JavaScript Performance

- Minimize DOM queries
- Use event delegation
- Debounce/throttle event handlers
- Use requestAnimationFrame for animations
- Lazy load non-critical scripts

### Loading Performance

- Minimize HTTP requests
- Use Vite for bundling and optimization
- Inline critical CSS (future)
- Defer non-critical JavaScript
- Optimize images

## Testing Checklist

### Browser Testing

- [ ] Chrome (latest)
- [ ] Firefox (latest)
- [ ] Safari (latest)
- [ ] Edge (latest)

### Responsive Testing

- [ ] Mobile (< 768px)
- [ ] Tablet (768px - 1024px)
- [ ] Desktop (> 1024px)

### Functionality Testing

- [ ] All links work
- [ ] Forms submit correctly
- [ ] Animations smooth
- [ ] Images load
- [ ] JavaScript functions correctly

### Accessibility Testing

- [ ] Keyboard navigation works
- [ ] Focus indicators visible
- [ ] Color contrast meets WCAG AA
- [ ] Alt text on images
- [ ] Semantic HTML used
- [ ] ARIA labels where needed

### Performance Testing

- [ ] Page loads quickly
- [ ] Animations smooth (60fps)
- [ ] No layout shifts
- [ ] Images optimized
- [ ] Scripts don't block rendering

## Future Considerations

### TALL Stack Migration

**Tailwind CSS**:
- Utility-first approach
- Replace custom CSS gradually
- Use design tokens from brand guidelines

**Alpine.js**:
- Replace vanilla JavaScript for interactivity
- Keep starfield animation in vanilla JS
- Use for dropdown menus, modals, tabs

**Livewire**:
- Server-side reactive components
- No API endpoints needed
- Real-time features

## Common Mistakes to Avoid

### DON'T

- ❌ Use inline styles or scripts
- ❌ Include emoji in production code
- ❌ Use purple or off-brand colors
- ❌ Skip semantic HTML
- ❌ Forget accessibility
- ❌ Ignore responsive design
- ❌ Use jQuery or heavy frameworks
- ❌ Skip browser testing
- ❌ Use non-standard fonts

### DO

- ✅ Use semantic HTML5
- ✅ Follow brand color palette
- ✅ Test in multiple browsers
- ✅ Ensure accessibility
- ✅ Optimize performance
- ✅ Use modern JavaScript
- ✅ Keep code clean and commented
- ✅ Test responsive design
- ✅ Use Oswald font family

## Code Review Checklist

Before committing frontend code:

- [ ] No inline styles or scripts
- [ ] No emoji in code
- [ ] Uses brand colors only
- [ ] Semantic HTML used
- [ ] Accessible (WCAG AA)
- [ ] Responsive design works
- [ ] Tested in browsers
- [ ] Performance optimized
- [ ] Code commented appropriately
- [ ] Follows naming conventions
- [ ] Tested locally at http://website.test/
