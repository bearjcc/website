---
description: "Ursa Minor Games - Laravel Best Practices and Architecture"
globs: "app/**/*.php,config/**/*.php,routes/**/*.php"
---

# Laravel Best Practices

## Core Principles

### Single Responsibility Principle (SRP)

- Each class or method should have only one reason to change
- Move business logic from controllers into dedicated service classes
- Use Form Request classes for validation logic
- Keep database logic in Eloquent models or repositories

### Thin Controllers

Controllers should only handle HTTP requests and responses:

```php
<?php

namespace App\Http\Controllers;

class GameController extends Controller
{
    public function index()
    {
        $games = Game::latest()->get();
        
        return view('games.index', compact('games'));
    }
}
```

### Service Layer for Business Logic

```php
<?php

namespace App\Services;

class GameService
{
    public function createGame(array $data): Game
    {
        // Validate business rules
        // Create game
        // Handle side effects
        // Return game
    }
}
```

## Architecture Patterns

### Directory Structure

```
app/
├── Http/
│   ├── Controllers/     # Thin controllers
│   ├── Middleware/      # Request filtering
│   └── Requests/        # Form requests
├── Models/             # Eloquent models
├── Services/           # Business logic
├── Repositories/       # Data access (optional)
├── Events/             # Domain events
├── Listeners/          # Event handlers
├── Jobs/               # Queue jobs
├── Policies/           # Authorization
└── Providers/          # Service providers
```

### Dependency Injection

**Always use constructor injection**:

```php
<?php

namespace App\Http\Controllers;

use App\Services\GameService;

class GameController extends Controller
{
    public function __construct(
        private readonly GameService $gameService
    ) {}
    
    public function store(Request $request)
    {
        $game = $this->gameService->createGame($request->validated());
        
        return redirect()->route('games.show', $game);
    }
}
```

**Don't use `new` keyword**:
```php
// ❌ DON'T
$service = new GameService();

// ✅ DO
public function __construct(private readonly GameService $service) {}
```

## Eloquent Best Practices

### Model Structure

```php
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Factories\HasFactory;

class Game extends Model
{
    use HasFactory;
    
    /**
     * The attributes that are mass assignable.
     */
    protected $fillable = [
        'name',
        'description',
        'status',
    ];
    
    /**
     * The attributes that should be cast.
     */
    protected $casts = [
        'published_at' => 'datetime',
        'is_active' => 'boolean',
    ];
    
    /**
     * Get the user that owns the game.
     */
    public function user()
    {
        return $this->belongsTo(User::class);
    }
    
    /**
     * Scope a query to only include active games.
     */
    public function scopeActive($query)
    {
        return $query->where('is_active', true);
    }
}
```

### Query Optimization

**Use Eager Loading to Prevent N+1 Queries**:

```php
// ❌ DON'T - N+1 query problem
$games = Game::all();
foreach ($games as $game) {
    echo $game->user->name; // Queries database for each game
}

// ✅ DO - Eager load relationships
$games = Game::with('user')->get();
foreach ($games as $game) {
    echo $game->user->name; // No additional queries
}
```

**Select Only Needed Columns**:

```php
// ❌ DON'T
$games = Game::all();

// ✅ DO
$games = Game::select('id', 'name', 'status')->get();
```

**Use Chunk for Large Datasets**:

```php
// Process large dataset in chunks
Game::chunk(100, function ($games) {
    foreach ($games as $game) {
        // Process game
    }
});
```

## Validation

### Form Request Classes

```php
<?php

namespace App\Http\Requests;

use Illuminate\Foundation\Http\FormRequest;

class StoreGameRequest extends FormRequest
{
    /**
     * Determine if the user is authorized to make this request.
     */
    public function authorize(): bool
    {
        return true; // Or use policy check
    }
    
    /**
     * Get the validation rules that apply to the request.
     */
    public function rules(): array
    {
        return [
            'name' => 'required|string|max:255',
            'description' => 'required|string',
            'status' => 'required|in:draft,published',
        ];
    }
    
    /**
     * Get custom messages for validator errors.
     */
    public function messages(): array
    {
        return [
            'name.required' => 'Please provide a game name',
            'status.in' => 'Invalid game status',
        ];
    }
}
```

**Use in Controller**:

```php
public function store(StoreGameRequest $request)
{
    // Already validated
    $validated = $request->validated();
    
    $game = Game::create($validated);
    
    return redirect()->route('games.show', $game);
}
```

## Configuration Management

### Never Use env() in Application Code

```php
// ❌ DON'T - Direct env() calls outside config files
$apiKey = env('API_KEY');

// ✅ DO - Use config() helper
$apiKey = config('services.api.key');
```

### Config Files

```php
// config/services.php
return [
    'api' => [
        'key' => env('API_KEY'),
        'url' => env('API_URL', 'https://api.example.com'),
    ],
];
```

## Route Organization

### Group Related Routes

```php
<?php

// routes/web.php

Route::middleware(['auth'])->group(function () {
    Route::prefix('games')->name('games.')->group(function () {
        Route::get('/', [GameController::class, 'index'])->name('index');
        Route::get('/create', [GameController::class, 'create'])->name('create');
        Route::post('/', [GameController::class, 'store'])->name('store');
        Route::get('/{game}', [GameController::class, 'show'])->name('show');
    });
});
```

### Resource Controllers

```php
// For standard CRUD operations
Route::resource('games', GameController::class);

// For API resources
Route::apiResource('games', GameController::class);
```

## Error Handling

### Controller Error Handling

```php
<?php

namespace App\Http\Controllers;

use Illuminate\Database\Eloquent\ModelNotFoundException;
use Exception;
use Illuminate\Support\Facades\Log;

class GameController extends Controller
{
    public function show(int $id)
    {
        try {
            $game = Game::findOrFail($id);
            
            return view('games.show', compact('game'));
        } catch (ModelNotFoundException $e) {
            return redirect()->route('games.index')
                ->with('error', 'Game not found');
        } catch (Exception $e) {
            Log::error('Failed to load game', [
                'game_id' => $id,
                'error' => $e->getMessage()
            ]);
            
            return back()->with('error', 'An error occurred');
        }
    }
}
```

### Custom Exceptions

```php
<?php

namespace App\Exceptions;

use Exception;

class GameNotFoundException extends Exception
{
    public function __construct(int $gameId)
    {
        parent::__construct("Game with ID {$gameId} not found");
    }
    
    public function render()
    {
        return redirect()->route('games.index')
            ->with('error', $this->getMessage());
    }
}
```

## Security Best Practices

### Input Validation and Sanitization

- Always validate user input using Form Requests
- Use Laravel's validation rules
- Never trust user input
- Sanitize output with Blade's `{{ }}` (auto-escapes)

### CSRF Protection

```blade
{{-- Always include @csrf in forms --}}
<form method="POST" action="{{ route('games.store') }}">
    @csrf
    {{-- Form fields --}}
</form>
```

### Mass Assignment Protection

```php
// Define fillable or guarded on models
protected $fillable = ['name', 'description'];

// Or
protected $guarded = ['id', 'admin'];
```

### SQL Injection Prevention

```php
// ❌ DON'T - Raw SQL with user input
DB::select("SELECT * FROM games WHERE name = '{$name}'");

// ✅ DO - Use parameter binding
DB::select("SELECT * FROM games WHERE name = ?", [$name]);

// ✅ BETTER - Use Eloquent
Game::where('name', $name)->get();
```

## Blade Best Practices

### Avoid Logic in Views

```blade
{{-- ❌ DON'T - Complex logic in views --}}
@if($game->status === 'published' && $game->published_at->isPast() && $game->is_active)
    <p>Game is live</p>
@endif

{{-- ✅ DO - Use model accessor --}}
@if($game->isLive())
    <p>Game is live</p>
@endif
```

### Use Components for Reusable UI

```blade
{{-- resources/views/components/game-card.blade.php --}}
@props(['game'])

<div class="feature">
    <h3>{{ $game->name }}</h3>
    <p>{{ $game->description }}</p>
</div>
```

```blade
{{-- Usage --}}
<x-game-card :game="$game" />
```

### Escape Output

```blade
{{-- ✅ DO - Auto-escapes (default) --}}
<p>{{ $game->name }}</p>

{{-- ❌ DON'T - Unless absolutely necessary --}}
<p>{!! $game->html_content !!}</p>
```

## Database Migrations

### Migration Best Practices

```php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('games', function (Blueprint $table) {
            $table->id();
            $table->foreignId('user_id')->constrained()->onDelete('cascade');
            $table->string('name');
            $table->text('description');
            $table->enum('status', ['draft', 'published'])->default('draft');
            $table->boolean('is_active')->default(true);
            $table->timestamp('published_at')->nullable();
            $table->timestamps();
            
            // Indexes
            $table->index('status');
            $table->index('published_at');
        });
    }
    
    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('games');
    }
};
```

### Migration Guidelines

- Always include `down()` method
- Use descriptive migration names
- Add indexes for frequently queried columns
- Use foreign key constraints
- Never modify existing migrations in production

## Testing

### Feature Tests

```php
<?php

namespace Tests\Feature;

use Tests\TestCase;
use App\Models\User;
use App\Models\Game;
use Illuminate\Foundation\Testing\RefreshDatabase;

class GameControllerTest extends TestCase
{
    use RefreshDatabase;
    
    public function test_user_can_create_game(): void
    {
        $user = User::factory()->create();
        
        $response = $this->actingAs($user)
            ->post(route('games.store'), [
                'name' => 'Test Game',
                'description' => 'A test game',
                'status' => 'draft',
            ]);
        
        $response->assertRedirect();
        $this->assertDatabaseHas('games', [
            'name' => 'Test Game',
        ]);
    }
}
```

### Unit Tests

```php
<?php

namespace Tests\Unit;

use Tests\TestCase;
use App\Models\Game;

class GameTest extends TestCase
{
    public function test_game_is_live(): void
    {
        $game = Game::factory()->create([
            'status' => 'published',
            'is_active' => true,
            'published_at' => now()->subDay(),
        ]);
        
        $this->assertTrue($game->isLive());
    }
}
```

## Code Style

### PSR-12 Standards

```php
<?php

declare(strict_types=1);

namespace App\Services;

use App\Models\Game;
use Illuminate\Support\Collection;

class GameService
{
    public function __construct(
        private readonly GameRepository $repository
    ) {}
    
    public function getActiveGames(): Collection
    {
        return $this->repository->findActive();
    }
}
```

### Laravel Pint

Run before committing:

```powershell
./vendor/bin/pint
```

## Performance Optimization

### Database Query Optimization

- Use eager loading for relationships
- Select only needed columns
- Use database indexes
- Cache frequently accessed data
- Use chunk() for large datasets

### Caching

```php
use Illuminate\Support\Facades\Cache;

// Remember cache pattern
$games = Cache::remember('active_games', 3600, function () {
    return Game::active()->get();
});

// Clear cache when data changes
Cache::forget('active_games');
```

## Common Patterns

### Repository Pattern (Optional)

```php
<?php

namespace App\Repositories;

use App\Models\Game;
use Illuminate\Support\Collection;

class GameRepository
{
    public function findActive(): Collection
    {
        return Game::where('is_active', true)->get();
    }
    
    public function create(array $data): Game
    {
        return Game::create($data);
    }
}
```

### Service Pattern

```php
<?php

namespace App\Services;

use App\Models\Game;
use App\Repositories\GameRepository;

class GameService
{
    public function __construct(
        private readonly GameRepository $repository
    ) {}
    
    public function createGame(array $data): Game
    {
        // Business logic here
        return $this->repository->create($data);
    }
}
```

## Laravel-Specific Features

### Events and Listeners

```php
// app/Events/GameCreated.php
class GameCreated
{
    public function __construct(public Game $game) {}
}

// app/Listeners/SendGameNotification.php
class SendGameNotification
{
    public function handle(GameCreated $event): void
    {
        // Send notification
    }
}
```

### Jobs for Background Processing

```php
<?php

namespace App\Jobs;

use App\Models\Game;
use Illuminate\Contracts\Queue\ShouldQueue;

class ProcessGame implements ShouldQueue
{
    public function __construct(public Game $game) {}
    
    public function handle(): void
    {
        // Process game in background
    }
}
```

## Deployment Considerations

### Railway Compatibility

- Use environment variables for configuration
- Ensure database migrations run on deploy
- Cache configuration and routes in production
- Use queue workers for background jobs

### Production Optimization

```powershell
# Cache configuration
php artisan config:cache

# Cache routes
php artisan route:cache

# Cache views
php artisan view:cache

# Optimize autoloader
composer install --optimize-autoloader --no-dev
```

## Documentation

### PHPDoc Comments

```php
/**
 * Create a new game.
 *
 * @param  array  $data
 * @return Game
 * @throws GameCreationException
 */
public function createGame(array $data): Game
{
    // Implementation
}
```

## Common Mistakes to Avoid

### DON'T

- ❌ Use `env()` outside config files
- ❌ Put business logic in controllers
- ❌ Forget to validate input
- ❌ Skip CSRF protection
- ❌ Use mass assignment without protection
- ❌ Make N+1 queries
- ❌ Forget to eager load relationships
- ❌ Put HTML in controller responses
- ❌ Skip testing

### DO

- ✅ Use dependency injection
- ✅ Keep controllers thin
- ✅ Validate all input
- ✅ Use Form Request classes
- ✅ Eager load relationships
- ✅ Follow PSR-12 standards
- ✅ Write tests
- ✅ Use Laravel's built-in features
- ✅ Cache expensive operations
