---
description: "Ursa Minor Games - Commit and Release Standards"
globs: "**/*"
---

# Commit and Release Standards

## Conventional Commits

### Format

```
<type>(<scope>): <description>

[optional body]

[optional footer]
```

### Components

- **type**: The kind of change (feat, fix, docs, etc.)
- **scope**: The area affected (optional)
- **description**: Short summary in imperative mood
- **body**: Detailed explanation (optional)
- **footer**: Breaking changes, issue references (optional)

## Commit Types

### Types That Trigger Version Bumps

**feat**: New feature (minor version bump)
```
feat(games): add sudoku game implementation
feat(auth): implement user registration
feat(homepage): add testimonials section
```

**fix**: Bug fix (patch version bump)
```
fix(header): correct sticky positioning on scroll
fix(games): resolve score calculation error
fix(auth): handle expired session properly
```

**BREAKING CHANGE**: Breaking changes (major version bump)
```
feat(api)!: change game API response structure

BREAKING CHANGE: Game API now returns different format
```

### Types That Don't Trigger Releases

**docs**: Documentation only
```
docs(readme): update installation instructions
docs(brand): add color palette guidelines
docs(api): document game endpoints
```

**style**: Code style changes (not CSS)
```
style(services): format code with Laravel Pint
style(controllers): fix indentation
```

**refactor**: Code restructuring
```
refactor(games): extract game logic to service
refactor(auth): simplify user validation
```

**perf**: Performance improvements
```
perf(database): add indexes to games table
perf(frontend): optimize starfield animation
```

**test**: Test additions/updates
```
test(games): add game creation tests
test(auth): cover edge cases in authentication
```

**build**: Build system changes
```
build(vite): update vite configuration
build(deps): update Laravel to 12.1
```

**ci**: CI/CD configuration
```
ci(railway): add deployment checks
ci(tests): configure GitHub Actions
```

**chore**: Maintenance tasks
```
chore(deps): update dependencies
chore(config): update phpunit configuration
```

## Scope Examples

### Common Scopes

- **games**: Game-related features
- **auth**: Authentication system
- **homepage**: Homepage content
- **header**: Site header
- **footer**: Site footer
- **design**: Design system changes
- **api**: API endpoints
- **database**: Database changes
- **tests**: Testing infrastructure
- **docs**: Documentation
- **deps**: Dependencies

### Scope Usage

```
feat(games): add chess game
fix(header): correct scroll behavior
docs(brand): update color guidelines
style(auth): format authentication service
refactor(games): simplify game logic
test(games): add integration tests
chore(deps): update composer packages
```

## Commit Message Guidelines

### Description

**DO**:
- Use imperative mood: "add", "fix", "update"
- Keep under 50 characters
- Start with lowercase
- No period at the end
- Be specific and clear

```
✅ feat(games): add sudoku game
✅ fix(header): correct sticky positioning
✅ docs(readme): update setup instructions
```

**DON'T**:
- Use past tense: "added", "fixed"
- Be vague: "update stuff", "fix bug"
- Use periods at end
- Capitalize first letter (after scope)

```
❌ feat(games): Added a game
❌ fix: Fixed bug
❌ Update things.
❌ Feat(games): Add game
```

### Body

Use the body to explain:
- **Why** the change was made
- **What** problem it solves
- **How** it works (if complex)

```
feat(games): add chess game implementation

Implements a basic chess game using vanilla JavaScript.
Includes piece movement validation and checkmate detection.
This addresses user requests for classic board games.

The game state is managed client-side with future plans
for server-side persistence and multiplayer support.
```

### Footer

Use footer for:
- Breaking changes
- Issue references
- Reviewer notes

```
feat(api): change game response structure

Update API to return more detailed game information.

BREAKING CHANGE: Game API response structure has changed.
Previous: { game: {...} }
New: { data: { game: {...}, metadata: {...} } }

Closes #123
```

## Examples

### Feature Addition

```
feat(games): add sudoku game

Implements a playable sudoku game with:
- Random puzzle generation
- Input validation
- Hint system
- Timer and scoring

This is the first browser game for the site and provides
a foundation for future game implementations.
```

### Bug Fix

```
fix(header): correct sticky positioning on scroll

The header was not staying fixed at the top when scrolling
due to incorrect CSS positioning. Changed from relative to
fixed positioning and adjusted z-index to ensure header
stays above content.

Fixes #45
```

### Documentation

```
docs(brand): add night sky color palette

Documents the official color palette for the Ursa Minor
Games brand, including primary and secondary colors with
hex codes and usage guidelines.
```

### Refactoring

```
refactor(games): extract game logic to service

Moved game business logic from GameController to
GameService to follow single responsibility principle
and make code more testable.

No functional changes.
```

### Breaking Change

```
feat(auth)!: implement new authentication system

Replace custom auth with Laravel Breeze for better
security and maintainability.

BREAKING CHANGE: All existing user sessions will be
invalidated. Users will need to log in again.

Migration path:
1. Backup user data
2. Run migration
3. Users re-authenticate
```

## Branch Strategy

### Branch Naming

**Feature Branches**:
```
feature/game-sudoku
feature/user-authentication
feature/homepage-redesign
```

**Bug Fix Branches**:
```
fix/header-scroll-bug
fix/game-score-calculation
fix/mobile-responsive-issue
```

**Documentation Branches**:
```
docs/update-readme
docs/api-documentation
docs/brand-guidelines
```

**Refactor Branches**:
```
refactor/game-service
refactor/auth-logic
refactor/frontend-structure
```

### Branch Workflow

1. **Create Branch from Main**
   ```powershell
   git checkout main
   git pull
   git checkout -b feature/game-sudoku
   ```

2. **Make Changes**
   - Implement feature
   - Write tests
   - Test locally at http://website.test/
   - Test in multiple browsers

3. **Commit Incrementally**
   ```powershell
   git add .
   git commit -m "feat(games): add sudoku grid component"
   
   # More changes...
   git add .
   git commit -m "feat(games): add sudoku validation logic"
   ```

4. **Push to Remote**
   ```powershell
   git push origin feature/game-sudoku
   ```

5. **Test Before Merge**
   - Run all tests: `php artisan test`
   - Test in browser
   - Verify functionality
   - Check responsive design

6. **Merge to Main**
   ```powershell
   git checkout main
   git pull
   git merge feature/game-sudoku
   git push
   ```

7. **Automatic Deployment**
   - Railway detects push to main
   - Deploys automatically
   - Monitor for issues

## Pre-Commit Checklist

Before committing, verify:

### Code Quality

- [ ] Code follows PSR-12 standards
- [ ] Formatted with Laravel Pint
- [ ] No debug code (`dd()`, `console.log()`)
- [ ] No commented out code
- [ ] No TODO comments (create issues instead)

### Testing

- [ ] All tests pass: `php artisan test`
- [ ] New tests added for new features
- [ ] Code coverage maintained (80%+)
- [ ] Manual testing completed

### Functionality

- [ ] Tested at http://website.test/
- [ ] Tested in multiple browsers
- [ ] Responsive design works
- [ ] No console errors
- [ ] No visual regressions

### Brand Compliance

- [ ] Follows brand guidelines
- [ ] Uses night sky color palette
- [ ] No emoji in production code
- [ ] No purple gradients
- [ ] Proper typography (Oswald)

### Security

- [ ] No secrets committed
- [ ] Input validated
- [ ] Output escaped
- [ ] Authentication checked
- [ ] Authorization verified

### Documentation

- [ ] Code commented appropriately
- [ ] README updated if needed
- [ ] Documentation updated
- [ ] Breaking changes documented

## Pre-Merge Checklist

Before merging to main:

### Quality Gates

- [ ] All tests passing
- [ ] Code reviewed (if team exists)
- [ ] No merge conflicts
- [ ] Branch up to date with main
- [ ] CI/CD checks passing

### Testing

- [ ] Full test suite passed
- [ ] Manual testing completed
- [ ] Browser testing done
- [ ] Mobile testing done
- [ ] Accessibility verified

### Documentation

- [ ] CHANGELOG updated (if maintained)
- [ ] Version bumped (if applicable)
- [ ] Migration notes documented
- [ ] API documentation updated

### Railway Compatibility

- [ ] Environment variables configured
- [ ] Database migrations ready
- [ ] Dependencies updated in composer.json
- [ ] Build process verified

## Commit Frequency

### How Often to Commit

**DO Commit**:
- After completing a logical unit of work
- After tests pass
- Before switching tasks
- Before taking a break
- Multiple times per feature

```
✅ feat(games): add sudoku grid component
✅ feat(games): add cell validation
✅ feat(games): add puzzle generation
✅ test(games): add sudoku tests
✅ docs(games): document sudoku implementation
```

**DON'T**:
- Commit broken code
- Commit untested code
- Make giant commits with multiple features
- Commit commented out code
- Commit debug statements

```
❌ feat(games): add everything
❌ wip: broken stuff
❌ fix: various things
```

## Commit Message Templates

### Feature

```
feat(<scope>): <short description>

<detailed explanation of what was added>

<why it was added>

<how it works (if complex)>
```

### Bug Fix

```
fix(<scope>): <short description>

<explanation of the bug>

<how it was fixed>

Fixes #<issue number>
```

### Documentation

```
docs(<scope>): <short description>

<what documentation was added/updated>

<why it was needed>
```

### Refactoring

```
refactor(<scope>): <short description>

<what was refactored>

<why it was refactored>

No functional changes.
```

## Version Control Best Practices

### General Principles

1. **Atomic Commits**: Each commit should represent one logical change
2. **Descriptive Messages**: Explain why, not just what
3. **Frequent Commits**: Commit early and often
4. **Test Before Commit**: Always run tests first
5. **One Feature Per Branch**: Keep branches focused

### Git Workflow

```powershell
# Start new feature
git checkout -b feature/new-game

# Make changes and commit
git add .
git commit -m "feat(games): add new game"

# Keep branch updated
git checkout main
git pull
git checkout feature/new-game
git merge main

# Test everything
php artisan test
# Manual testing...

# Merge when ready
git checkout main
git merge feature/new-game
git push

# Clean up
git branch -d feature/new-game
```

## Release Process

### Semantic Versioning

- **Major**: Breaking changes (X.0.0)
- **Minor**: New features (0.X.0)
- **Patch**: Bug fixes (0.0.X)

### Release Workflow

1. **Ensure All Tests Pass**
   ```powershell
   php artisan test
   ```

2. **Update Version** (if using versioning)
   - Update version in relevant files
   - Update CHANGELOG

3. **Create Release Commit**
   ```powershell
   git commit -m "chore(release): bump version to 1.2.0"
   ```

4. **Tag Release**
   ```powershell
   git tag -a v1.2.0 -m "Release version 1.2.0"
   git push --tags
   ```

5. **Deploy to Railway**
   ```powershell
   git push origin main
   ```

6. **Monitor Deployment**
   - Check Railway logs
   - Test production site
   - Verify functionality

## Common Mistakes to Avoid

### DON'T

- ❌ Use vague commit messages: "fix stuff", "update things"
- ❌ Commit secrets or .env files
- ❌ Make massive commits with unrelated changes
- ❌ Commit broken or untested code
- ❌ Skip testing before committing
- ❌ Force push to main branch
- ❌ Commit commented out code
- ❌ Use emoji in commit messages

### DO

- ✅ Write clear, descriptive messages
- ✅ Commit logical units of work
- ✅ Test before every commit
- ✅ Use conventional commit format
- ✅ Keep commits focused
- ✅ Explain why in commit body
- ✅ Reference issues when applicable
- ✅ Review changes before committing

## Code Review Checklist

If working with team:

### Review Focus

- [ ] Code quality and standards
- [ ] Test coverage
- [ ] Security considerations
- [ ] Performance implications
- [ ] Documentation completeness
- [ ] Brand compliance
- [ ] Railway compatibility

### Review Comments

```
✅ Good: "Consider extracting this logic to a service class for better testability"
✅ Good: "This needs a test to cover the edge case when user is null"
❌ Bad: "This is wrong"
❌ Bad: "Change it"
```

## Summary

### Key Principles

- Use conventional commit format
- Write descriptive commit messages
- Commit frequently and atomically
- Test before committing
- Test before merging to main
- Keep branches focused
- Follow branch naming conventions
- One feature at a time
- Document breaking changes
- Never commit secrets
- Maintain Railway compatibility

### Commit Workflow

1. Create feature branch
2. Make changes
3. Write tests
4. Test locally
5. Commit with conventional format
6. Push to remote
7. Test before merge
8. Merge to main
9. Automatic Railway deployment
10. Monitor production

### Remember

- **Test locally** at http://website.test/ before committing
- **Test before merge** - always run full test suite
- **One feature at a time** - "eat the elephant one bite at a time"
- **Follow brand guidelines** - no emoji, no purple
- **Maintain Railway compatibility** - test deployment pipeline
