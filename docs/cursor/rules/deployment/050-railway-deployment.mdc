---
description: "Ursa Minor Games - Railway Deployment and Configuration"
globs: "nixpacks.toml,.env.example"
---

# Railway Deployment

## About Railway

Railway is a modern platform for deploying applications with:
- **Auto-Deploy**: Automatic deployment from Git
- **Zero Config**: Intelligent build detection
- **Managed Services**: Databases, Redis, etc.
- **Environment Variables**: Secure config management
- **Automatic HTTPS**: SSL certificates included
- **Custom Domains**: Easy domain configuration

## Deployment Flow

### Automatic Deployment

```
1. Developer commits to main branch
   ↓
2. Git push to GitHub/GitLab
   ↓
3. Railway detects push to main
   ↓
4. Railway pulls latest code
   ↓
5. Railway runs build process (Nixpacks)
   ↓
6. Railway runs migrations
   ↓
7. Railway deploys to production
   ↓
8. Site is live with new changes
```

### Build Process

Railway uses Nixpacks to build Laravel applications:

1. **Detect Laravel**: Identifies Laravel via `composer.json`
2. **Install Dependencies**: Runs `composer install --optimize-autoloader --no-dev`
3. **Build Assets**: Runs `npm install && npm run build`
4. **Cache Config**: Runs `php artisan config:cache`
5. **Cache Routes**: Runs `php artisan route:cache`
6. **Cache Views**: Runs `php artisan view:cache`
7. **Start Server**: Runs PHP server

## Configuration

### Nixpacks Configuration

File: `nixpacks.toml`

```toml
[phases.setup]
nixPkgs = ["php83", "php83Extensions.pdo", "php83Extensions.pdo_sqlite"]

[phases.install]
cmds = [
    "composer install --optimize-autoloader --no-dev",
    "npm install",
    "npm run build"
]

[phases.build]
cmds = [
    "php artisan config:cache",
    "php artisan route:cache",
    "php artisan view:cache"
]

[start]
cmd = "php artisan serve --host=0.0.0.0 --port=$PORT"
```

### Environment Variables

#### Required Variables

Configure in Railway dashboard:

```env
# Application
APP_NAME="Ursa Minor Games"
APP_ENV=production
APP_KEY=<generated-key>
APP_DEBUG=false
APP_URL=https://ursaminorgames.com

# Database (Railway provides)
DATABASE_URL=<railway-provided>

# Or individual database vars
DB_CONNECTION=pgsql
DB_HOST=<railway-provided>
DB_PORT=<railway-provided>
DB_DATABASE=<railway-provided>
DB_USERNAME=<railway-provided>
DB_PASSWORD=<railway-provided>

# Logging
LOG_CHANNEL=stack
LOG_LEVEL=error

# Session
SESSION_DRIVER=database
SESSION_LIFETIME=120

# Cache
CACHE_DRIVER=database
```

#### Optional Variables

```env
# Mail (for future features)
MAIL_MAILER=smtp
MAIL_HOST=smtp.mailtrap.io
MAIL_PORT=2525
MAIL_USERNAME=<your-username>
MAIL_PASSWORD=<your-password>

# Queue (for future features)
QUEUE_CONNECTION=database

# Redis (if added)
REDIS_HOST=<railway-provided>
REDIS_PASSWORD=<railway-provided>
REDIS_PORT=<railway-provided>
```

### Laravel Configuration

#### config/database.php

Ensure database URL parsing is enabled:

```php
<?php

return [
    'default' => env('DB_CONNECTION', 'pgsql'),
    
    'connections' => [
        'pgsql' => [
            'driver' => 'pgsql',
            'url' => env('DATABASE_URL'),
            'host' => env('DB_HOST', '127.0.0.1'),
            'port' => env('DB_PORT', '5432'),
            'database' => env('DB_DATABASE', 'forge'),
            'username' => env('DB_USERNAME', 'forge'),
            'password' => env('DB_PASSWORD', ''),
            // ...
        ],
    ],
];
```

#### config/session.php

Use database or cache driver in production:

```php
<?php

return [
    'driver' => env('SESSION_DRIVER', 'database'),
    
    'secure' => env('SESSION_SECURE_COOKIE', true),
    'same_site' => 'lax',
];
```

## Database Management

### Migrations

Railway runs migrations automatically during deployment:

```toml
[phases.build]
cmds = [
    "php artisan migrate --force",
    "php artisan config:cache",
    "php artisan route:cache"
]
```

### Manual Migration

If needed, run migrations manually:

```powershell
# SSH into Railway container
railway run php artisan migrate

# Or use Railway CLI
railway run php artisan migrate:status
```

### Database Backup

Railway provides automatic backups for database services. Configure backup retention in Railway dashboard.

### Seeding (Development Only)

Don't seed production database automatically:

```php
<?php

// database/seeders/DatabaseSeeder.php

public function run(): void
{
    // Only seed in development
    if (app()->environment('local')) {
        $this->call([
            UserSeeder::class,
            GameSeeder::class,
        ]);
    }
}
```

## Deployment Checklist

### Before Deploying

- [ ] All tests passing locally
- [ ] Tested at http://website.test/
- [ ] Browser testing complete
- [ ] Mobile testing complete
- [ ] No debug code (`dd()`, `console.log()`)
- [ ] No secrets in code
- [ ] Environment variables configured
- [ ] Database migrations ready
- [ ] Assets compiled
- [ ] Dependencies updated

### During Deployment

- [ ] Monitor Railway build logs
- [ ] Watch for build errors
- [ ] Check migration status
- [ ] Verify asset compilation
- [ ] Wait for deployment completion

### After Deployment

- [ ] Test production site
- [ ] Verify homepage loads
- [ ] Check all main features
- [ ] Test user flows
- [ ] Check for console errors
- [ ] Verify mobile responsiveness
- [ ] Test in multiple browsers
- [ ] Monitor error logs

## Monitoring

### Railway Logs

View logs in Railway dashboard:

```
Deployment Logs: Build and deployment process
Application Logs: Runtime application logs
```

### Laravel Logging

Configure appropriate log level for production:

```env
LOG_LEVEL=error
```

### Error Monitoring

Monitor for errors:

```php
<?php

// app/Exceptions/Handler.php

public function register(): void
{
    $this->reportable(function (Throwable $e) {
        // Log to Railway logs
        Log::error($e->getMessage(), [
            'exception' => get_class($e),
            'file' => $e->getFile(),
            'line' => $e->getLine(),
        ]);
    });
}
```

## Troubleshooting

### Common Issues

#### Build Fails

**Issue**: Build fails during deployment

**Solutions**:
- Check Railway build logs
- Verify `composer.json` is valid
- Ensure all dependencies are listed
- Check for PHP version compatibility
- Verify `nixpacks.toml` configuration

#### App Key Not Set

**Issue**: "No application encryption key has been set"

**Solution**:
```powershell
# Generate key locally
php artisan key:generate --show

# Add to Railway environment variables
APP_KEY=base64:generated-key
```

#### Database Connection Fails

**Issue**: Can't connect to database

**Solutions**:
- Verify DATABASE_URL is set
- Check database service is running
- Ensure database credentials are correct
- Verify database exists
- Check connection settings in config/database.php

#### Assets Not Loading

**Issue**: CSS/JS files return 404

**Solutions**:
- Verify `npm run build` runs during deployment
- Check `public` directory structure
- Verify asset paths in Blade templates
- Check `vite.config.js` configuration
- Ensure Vite manifest is generated

#### Migration Fails

**Issue**: Database migration fails during deployment

**Solutions**:
- Check migration syntax
- Verify database connection
- Review migration order
- Check for conflicting migrations
- Test migration locally first

### Debugging

#### View Logs

```powershell
# Install Railway CLI
# View live logs
railway logs

# View specific service logs
railway logs --service web
```

#### SSH into Container

```powershell
# Connect to Railway container
railway run bash

# Run artisan commands
railway run php artisan migrate:status
railway run php artisan config:clear
```

## Performance Optimization

### Production Optimizations

Railway automatically optimizes Laravel for production:

```bash
# Composer optimization
composer install --optimize-autoloader --no-dev

# Config caching
php artisan config:cache

# Route caching
php artisan route:cache

# View caching
php artisan view:cache

# Event caching
php artisan event:cache
```

### Asset Optimization

Vite automatically optimizes assets for production:

```javascript
// vite.config.js
export default defineConfig({
    build: {
        minify: true,
        sourcemap: false,
    },
});
```

### Database Optimization

```php
<?php

// Use database indexes
Schema::table('games', function (Blueprint $table) {
    $table->index('status');
    $table->index('published_at');
    $table->index(['user_id', 'status']);
});

// Eager load relationships
$games = Game::with('user', 'scores')->get();

// Use caching
Cache::remember('active_games', 3600, function () {
    return Game::active()->get();
});
```

## Rollback

### Railway Rollback

Railway allows instant rollback to previous deployments:

1. Open Railway dashboard
2. Navigate to Deployments
3. Find previous working deployment
4. Click "Redeploy"

### Database Rollback

```powershell
# Rollback last migration
railway run php artisan migrate:rollback

# Rollback specific steps
railway run php artisan migrate:rollback --step=2

# Reset database (DANGER: loses all data)
railway run php artisan migrate:reset
```

## Scaling

### Vertical Scaling

Railway automatically provides resources:
- CPU: Scales with load
- Memory: Adjusts as needed
- Storage: Expandable

### Horizontal Scaling

For high traffic (future):
- Add multiple instances
- Use load balancing
- Implement Redis for caching
- Use queue workers

## Security

### Environment Variables

**DO**:
- Store all secrets in Railway environment variables
- Use strong APP_KEY
- Enable HTTPS (automatic)
- Set APP_DEBUG=false
- Use secure session cookies

**DON'T**:
- Commit secrets to Git
- Hardcode API keys
- Use weak passwords
- Expose debug information
- Use HTTP in production

### Security Headers

```php
<?php

// app/Http/Middleware/SecurityHeaders.php

public function handle($request, Closure $next)
{
    $response = $next($request);
    
    $response->headers->set('X-Frame-Options', 'SAMEORIGIN');
    $response->headers->set('X-Content-Type-Options', 'nosniff');
    $response->headers->set('X-XSS-Protection', '1; mode=block');
    
    return $response;
}
```

## Maintenance Mode

### Enable Maintenance Mode

```powershell
# Enable maintenance mode
railway run php artisan down

# With custom message
railway run php artisan down --message="Upgrading database"

# With secret bypass
railway run php artisan down --secret="ursa-minor-2024"
# Access via: https://ursaminorgames.com/ursa-minor-2024
```

### Disable Maintenance Mode

```powershell
railway run php artisan up
```

## Best Practices

### Deployment Strategy

1. **Test Thoroughly**: Test locally before pushing
2. **Small Changes**: Deploy small, incremental changes
3. **Monitor Deployment**: Watch build logs
4. **Test Production**: Verify after deployment
5. **Be Ready to Rollback**: Know how to rollback quickly

### Environment Configuration

- Keep `.env.example` updated
- Document all environment variables
- Never commit `.env` file
- Use Railway's environment variables
- Review variables regularly

### Database Management

- Always test migrations locally first
- Use migration rollback for mistakes
- Keep database backups
- Never run seeders in production
- Review migration order

### Asset Management

- Use Vite for asset compilation
- Test asset loading after deployment
- Ensure cache busting works
- Verify asset paths are correct
- Monitor asset file sizes

## Continuous Improvement

### Monitoring

- Review Railway logs regularly
- Monitor application performance
- Track error rates
- Check response times
- Monitor resource usage

### Optimization

- Profile slow pages
- Optimize database queries
- Cache frequently accessed data
- Minimize asset sizes
- Use CDN for static assets (future)

### Documentation

- Document deployment process
- Keep environment variables documented
- Document troubleshooting steps
- Update deployment checklist
- Share lessons learned

## Summary

### Key Points

- Railway auto-deploys from main branch
- Test thoroughly before pushing to main
- Monitor deployment logs
- Verify site after deployment
- Be ready to rollback if needed
- Keep environment variables secure
- Use database for sessions and cache
- Optimize for production
- Monitor application performance
- Document deployment process

### Railway Compatibility

- This site is hosted on Railway
- Must maintain Railway compatibility
- Test deployment pipeline regularly
- Keep `nixpacks.toml` updated
- Use Railway's environment variables
- Monitor Railway service status
- Review Railway best practices
- Stay within resource limits

### Emergency Contacts

If deployment fails:
1. Check Railway status page
2. Review deployment logs
3. Rollback to previous version
4. Check environment variables
5. Verify database connection
6. Review recent changes
7. Contact Railway support if needed
