# Ursa Minor Games - Cursor Rules

## Project Overview

This is the website for Ursa Minor Games, a game development brand focused on creating memorable gaming experiences. The site serves as a hub for browser games, F1 predictions, board games, and world-building content.

## Tech Stack

- **Backend**: Laravel 12.x (PHP 8.3+)
- **Frontend**: Vanilla HTML, CSS, JavaScript
- **Future**: TALL Stack (Tailwind, Alpine.js, Laravel, Livewire)
- **Hosting**: Railway (auto-deploy from main branch)
- **Local Dev**: Laravel Herd at http://website.test/

## Design System & Branding

### Visual Identity

**Theme**: Simple elegance of the night sky
- Stars and constellations
- Moon and celestial elements
- Deep space aesthetic
- Clean, minimalist approach

### Color Palette

Primary Colors:
- `#000000` - Deep black (night sky)
- `#001a33` - Midnight blue (mid-gradient)
- `#002d58` - Evening blue (late dusk)
- `#ffffff` - Pure white (stars, text)
- `#fff89a` (rgb(255, 248, 154)) - Soft yellow (accents, highlights)

Secondary Colors:
- `rgba(0, 0, 0, 0.3)` - Subtle dark overlays
- `rgba(255, 255, 255, 0.05)` - Subtle light cards
- `rgba(255, 255, 255, 0.7)` - Muted text
- `rgba(255, 248, 154, 0.3)` - Subtle yellow borders

### Typography

- **Font Family**: 'Oswald', sans-serif (Google Fonts)
- **Weights**: 200-700 available
- **Hierarchy**:
  - h1: 3rem, weight 700
  - h2: 2.5rem, weight 600, yellow accent
  - h3: 1.8rem, weight 500
  - Body: 1.1rem, line-height 1.8

### Design Principles

DO:
- Use night sky gradients (black to evening blue)
- Implement starfield effects and subtle animations
- Keep designs clean and minimal
- Use soft yellow for accents and highlights
- Ensure proper contrast for accessibility
- Use heroicons or similar free icon packs when needed
- Maintain elegant simplicity

DO NOT:
- Use emoji in production code
- Use purple gradients or AI-typical color schemes
- Over-complicate the design
- Use castle icons or fantasy imagery
- Copy clichéd AI design patterns
- Use inline styles in views (use CSS classes)

### Component Guidelines

- Keep HTML semantic and accessible
- Use CSS custom properties (CSS variables) for consistency
- Animations should be subtle and purposeful
- Maintain responsive design principles
- Test on multiple screen sizes

## Code Standards

### Laravel Best Practices

- Follow Laravel conventions and naming standards
- Use Blade templates for views
- Prefer Laravel-native solutions (Livewire over React)
- Keep controllers thin, use service classes for logic
- Use middleware for authentication and authorization
- Follow PSR-12 coding standards

### Frontend Standards

- No inline JavaScript or CSS in Blade views
- Use asset helpers: `asset()`, `@vite()`, etc.
- Organize CSS with clear section comments
- Keep JavaScript modular and well-commented
- Use semantic HTML5 elements
- Ensure accessibility (ARIA labels, semantic markup)

### File Organization

```
public/
  ├── style.css       # Main stylesheet
  ├── script.js       # Starfield animation
  ├── scroll.js       # Header scroll behavior
  └── *.svg          # Logo and assets (do NOT read directly)

resources/
  ├── css/
  │   └── app.css    # Tailwind config (future)
  ├── js/
  │   └── app.js     # Main JS entry
  └── views/
      └── *.blade.php # Blade templates
```

### Asset Handling

- Images should use Bootstrap Vite for cache busting
- Use `@images/` alias for imports
- Do NOT manually copy assets to public/
- SVG files: use `cat` command to view, NOT direct read
- Keep tavern_assets separate from public folder

## Development Workflow

### Local Development

- Use Laravel Herd: http://website.test/
- Run `npm run dev` for auto-updates (runs in background)
- Do NOT run `npm run build` manually
- Changes apply through dev server automatically

### Git Conventions

- Use Conventional Commits format
- Branch strategy: feature branches, main for production
- Main branch auto-deploys to Railway
- Never commit secrets or .env files

Commit Types:
- `feat:` - New features (minor version bump)
- `fix:` - Bug fixes (patch version bump)
- `docs:` - Documentation only
- `style:` - Code formatting (not CSS)
- `refactor:` - Code restructuring
- `perf:` - Performance improvements
- `test:` - Test additions/updates
- `chore:` - Maintenance tasks

Example:
```
feat(homepage): enhance night sky gradient effect
fix(header): correct sticky positioning on scroll
docs(brand): add branding guidelines
```

### Testing

- Write tests for new features
- Aim for 80%+ coverage
- Use PHPUnit for backend tests
- Test responsive designs manually

### Security

- Never read or modify .env files
- Validate and sanitize user input
- Use Laravel's built-in security features
- Follow OWASP guidelines
- Encrypt sensitive data

## Problem-Solving Approach

1. Perform root cause analysis before changes
2. Understand the problem and intent thoroughly
3. Use existing solutions before creating new ones
4. Prefer simple, maintainable solutions
5. Focus on one task at a time
6. Test incrementally

## Windows Development Notes

- Use PowerShell 7 equivalents for commands
- Use `docker compose` (not `docker-compose`)
- Path separators: use `\` or let tools handle it
- File operations: use PowerShell cmdlets when appropriate

## Memories & Preferences

- Focus on relevant files only, not every file
- Don't include elaborate section headers
- Keep documentation in .md files for humans
- After task completion, commit changes
- Deploy Python packages via Docker, not locally
- One todo item at a time ("eat the elephant one bite at a time")

## Future Enhancements

- TALL Stack implementation
- User authentication system
- Browser games (Sudoku, Chess)
- F1 predictions platform
- Board game digital versions
- World-building wiki

## Resources

- Laravel Docs: https://laravel.com/docs
- Heroicons: https://heroicons.com
- Railway Docs: https://docs.railway.app
- Google Fonts (Oswald): https://fonts.google.com

