---
description: "Railway deployment and configuration for Ursa Minor Games"
alwaysApply: true
---

# Railway Deployment Standards

This rule ensures all code changes maintain Railway deployment compatibility.

## Critical Requirements

### Docker Build Compatibility

**ALL changes MUST be Docker-compatible:**
- ✅ Use environment variables for configuration
- ✅ Never hardcode absolute paths
- ✅ Assume storage is ephemeral (use database or external storage for persistence)
- ✅ Log to stderr/stdout (never to files in production)

### Environment Configuration

**ALWAYS use `config()` helper, NEVER `env()` in application code:**

```php
// ❌ WRONG
$apiKey = env('API_KEY');

// ✅ CORRECT
$apiKey = config('services.api.key');
```

**All environment variables MUST have defaults in config files:**

```php
// config/services.php
'api' => [
    'key' => env('API_KEY', 'default-value'),
],
```

### Logging Requirements

**Production logs MUST go to stderr:**
- Railway environment: `LOG_CHANNEL=stderr`
- Local development: `LOG_CHANNEL=stack`

**NEVER log to files in production** - Railway containers are ephemeral.

### Asset Building

**Frontend assets MUST be built during Docker build:**
- Vite builds to `public/build/` in Docker image
- Never rely on dev server in production
- Use `@vite` directive in Blade templates

### Database Considerations

**Support both SQLite (local) and PostgreSQL (Railway):**

```php
// Works for both
Model::query()->where('status', 'active')->get();

// Database-specific features require guards
if (config('database.default') === 'pgsql') {
    // PostgreSQL-specific code
}
```

**Migrations MUST be idempotent:**
- Safe to run multiple times
- Use `Schema::hasTable()` and `Schema::hasColumn()` for conditional logic

### Production Safety Guards

**NEVER install dev dependencies in production:**
- `composer install --no-dev` in Dockerfile
- Dev packages in `require-dev` (e.g., debugbar, IDE helper)

**Explicitly disable debug tools:**

```php
// In AppServiceProvider
if ($this->app->environment('production')) {
    $this->app['config']->set('debugbar.enabled', false);
}
```

## Docker Build Structure

### Multi-Stage Build Pattern

**ALWAYS use multi-stage builds:**
1. **Node stage**: Build frontend assets
2. **Composer stage**: Install PHP dependencies
3. **Runtime stage**: PHP-FPM + Nginx

**Example structure:**

```dockerfile
FROM node:20-bullseye AS nodebuild
# Build assets

FROM composer:2 AS composerbuild
# Install dependencies

FROM php:8.3-fpm-bullseye AS app
# Runtime with nginx + supervisor
```

### Required Docker Files

**These files MUST exist and be maintained:**
- `Dockerfile` - Multi-stage build definition
- `deploy/nginx.conf` - Nginx web server config
- `deploy/supervisord.conf` - Process manager config
- `deploy/entrypoint.sh` - Startup script

## Railway Configuration

### Required Environment Variables

**Minimum variables for Railway:**

```env
APP_ENV=production
APP_DEBUG=false
APP_KEY=<auto-generated-or-set>
APP_URL=https://your-app.up.railway.app
LOG_CHANNEL=stderr
LOG_LEVEL=info
```

**For PostgreSQL:**

```env
DATABASE_URL=${{Postgres.DATABASE_URL}}
# Or individual vars
DB_CONNECTION=pgsql
DB_HOST=${{Postgres.PGHOST}}
DB_PORT=${{Postgres.PGPORT}}
DB_DATABASE=${{Postgres.PGDATABASE}}
DB_USERNAME=${{Postgres.PGUSER}}
DB_PASSWORD=${{Postgres.PGPASSWORD}}
```

### Port Configuration

**Railway expects port 8080:**
- Nginx listens on 8080 (defined in `deploy/nginx.conf`)
- Railway auto-detects and exposes this port
- Never hardcode port - use `${PORT:-8080}` if needed

## CI/CD Requirements

### GitHub Actions Smoke Test

**ALWAYS test Docker build before Railway deployment:**
- `.github/workflows/railway-smoke.yml` runs on push to main
- Validates Docker build succeeds
- Checks artisan commands work
- Verifies assets are built

**If smoke test fails, fix before merging.**

## Common Pitfalls to Avoid

### ❌ DON'T

- Don't use file-based sessions/cache without database backup
- Don't log to files in production
- Don't use `env()` outside config files
- Don't rely on writable storage outside `storage/` directory
- Don't hardcode localhost or development URLs
- Don't include dev dependencies in production build
- Don't run migrations manually (use `RUN_MIGRATIONS=1` env var)

### ✅ DO

- Use database for sessions/cache in production
- Use stderr/stdout for logs
- Use `config()` helper everywhere
- Store uploads in external storage (S3, Railway volumes)
- Use environment variables for all URLs
- Use `composer install --no-dev` in production
- Automate migrations via environment variable

## Testing Railway Compatibility

### Before Committing

**Check these before pushing:**

1. **Docker Build Test:**
   ```bash
   docker build -t test .
   ```

2. **Artisan Commands:**
   ```bash
   docker run --rm -e APP_KEY=base64:TEST= test php artisan --version
   ```

3. **Assets Exist:**
   ```bash
   docker run --rm test ls -la /var/www/html/public/build
   ```

### After Pushing

**Monitor GitHub Actions:**
- Railway smoke test must pass
- Fix any build failures immediately

**Monitor Railway Logs:**
- Check for errors after deployment
- Verify APP_KEY generation
- Confirm migrations ran (if enabled)

## Performance Optimization

### Caching in Production

**Railway entrypoint automatically caches:**
- `php artisan config:cache`
- `php artisan route:cache`
- `php artisan view:cache`

**Do NOT run these manually in Railway** - they're handled automatically.

### OPcache Configuration

**Dockerfile includes optimal OPcache settings:**
- `opcache.enable=1`
- `opcache.validate_timestamps=0`
- `opcache.memory_consumption=128`

## Monitoring and Debugging

### Viewing Logs in Railway

**All application logs go to Railway dashboard:**
- PHP errors → stderr
- Laravel logs → stderr (via LOG_CHANNEL)
- Nginx errors → stderr

**To debug issues:**
1. Check Railway logs in dashboard
2. Temporarily enable `APP_DEBUG=true` (then disable!)
3. Use `php artisan tinker` via Railway shell

### Health Checks

**Railway can monitor `/up` endpoint:**
- Laravel 11+ includes health check route
- Returns 200 OK if app is healthy
- Configure in Railway service settings

## Deployment Checklist

**Before first Railway deployment:**

- [ ] Railway project created and linked to GitHub
- [ ] Railway configured to use Dockerfile (not nixpacks)
- [ ] Required environment variables set in Railway
- [ ] PostgreSQL plugin added (if using database)
- [ ] `LOG_CHANNEL=stderr` set in Railway
- [ ] Custom domain configured (optional)

**For every deployment:**

- [ ] GitHub Actions smoke test passes
- [ ] Local tests pass (`php artisan test`)
- [ ] No `env()` calls outside config files
- [ ] Assets build successfully (`npm run build`)
- [ ] Migrations are idempotent and safe
- [ ] No dev dependencies in production code

## Rollback Strategy

**If deployment fails:**

1. **Immediate**: Railway → Deployments → Rollback to previous version
2. **Investigate**: Check logs for error messages
3. **Fix**: Address issue in code
4. **Test**: Ensure smoke test passes
5. **Redeploy**: Push fix to main branch

## Additional Resources

- [README - Railway Section](../../README.md#deployment)
- [Deployment Guide](../../docs/DEPLOYMENT_GUIDE.md)
- [Railway Documentation](https://docs.railway.app)
- [Docker Multi-Stage Builds](https://docs.docker.com/build/building/multi-stage/)

---

**Last Updated**: 2025-10-13
**Maintained By**: Development Team
