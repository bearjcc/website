---
description: "Testing requirements, quality guardrails, and content validation for Ursa Minor Games"
globs: "tests/**/*,resources/views/**/*,routes/web.php"
---

# Testing and Quality Guardrails

Testing standards, content validation, and quality requirements for Ursa Minor Games.

## Critical Rules

1. **80% CODE COVERAGE** target for new features
2. **SMOKE TESTS** for all public Blade views
3. **BANNED TERMS** in public content (café, storefront, shop for future ambitions)
4. **NO HEAVY IMAGES** on homepage - prefer CSS solutions
5. **TEST BEFORE COMMIT** - All tests must pass locally
6. **VERIFY AFTER EVERY CHANGE** - No claiming success without testing
7. **STRUCTURED FAILURE REPORTING** - Admit failures explicitly and iterate deliberately

## Verification Protocol

### MANDATORY: Post-Change Verification

**After ANY code change affecting UI or functionality, you MUST**:

1. **Run the code**: Execute/view the changed functionality
2. **Visual check**: For UI changes, open http://website.test/ in browser
3. **Smoke test**: Verify the specific feature works as intended
4. **Regression check**: Confirm you didn't break existing functionality
5. **Test suite**: Run relevant automated tests

**DO NOT skip these steps. DO NOT claim success without verification.**

### Structured Failure Reporting

**If your fix doesn't work or breaks something**:

#### 1. Explicit Admission
State clearly what failed:
```
❌ FAILURE: The homepage layout is still broken after my fix.
   The hero section is not displaying correctly.
```

#### 2. Diagnosis
Explain what you tried and why it failed:
```
🔍 DIAGNOSIS:
   - I attempted to fix layout by adding flexbox to .hero
   - This didn't work because the parent container lacks max-width
   - The actual issue: missing max-width constraint causing full-screen stretch
```

#### 3. Root Cause
Identify the underlying problem:
```
🎯 ROOT CAUSE:
   The .section container needs max-width: 960px and margin: 0 auto
   Current CSS has width: 100% with no constraint
```

#### 4. New Approach
Propose a different solution:
```
✅ NEW APPROACH:
   1. Add max-width: 960px to .section
   2. Add margin: 0 auto for centering
   3. Test at 1920px viewport to verify constraint works
```

#### 5. Verification Plan
State how you will verify the fix:
```
✓ VERIFICATION:
   - Open http://website.test/ in browser
   - Resize to 1920px width
   - Confirm content centers and doesn't stretch full-width
   - Check mobile (375px) still works
   - Run smoke tests
```

**Complete Example**:
```
❌ FAILURE: Homepage hero icons are too large and overwhelming the text.

🔍 DIAGNOSIS:
   - Set icon size to 64px absolute
   - This doesn't scale with text
   - Icons dwarf 16px body text (4x larger)

🎯 ROOT CAUSE:
   Icons need relative sizing (em units) not fixed pixels

✅ NEW APPROACH:
   - Change icon size to 1.5em (scales with text)
   - Add max-width: 2rem to prevent excessive scaling
   - Use vertical-align: middle for alignment

✓ VERIFICATION:
   - Test at different text sizes
   - Verify icons scale proportionally
   - Check alignment with text baseline
   - Visual test at http://website.test/
```

### Token-Efficient Testing

**Avoid wasteful loops**:
- ❌ Try fix → claim success → user reports still broken → repeat
- ✅ Try fix → verify yourself → confirm working → document

**Be deliberate**:
1. Diagnose before coding
2. Code with clear hypothesis
3. Verify immediately after change
4. Only iterate if verified failure
5. Document what worked/didn't

**Stop and think if**:
- You've tried same approach 3+ times
- You're not sure why last attempt failed
- You haven't verified any of your changes
- You're guessing without diagnosis

## Homepage Visual Assertions

### CRITICAL: Homepage Integrity Tests

**REQUIRED**: The homepage must have visual assertion tests that verify layout integrity.

#### Required Homepage Tests

**1. Hero Section Presence**:
```php
public function test_homepage_has_hero_section_with_logo(): void
{
    $response = $this->get('/');
    
    $response->assertStatus(200);
    
    // Hero section exists
    $response->assertSee('Ursa Minor Games');
    
    // Logo present
    $response->assertSee('bear.svg', false); // Raw HTML check
    
    // CTA present
    $response->assertSeeInOrder([
        'Ursa Minor Games',
        'Where games are born under the stars',
    ]);
}
```

**2. Layout Structure Test**:
```php
public function test_homepage_has_proper_layout_structure(): void
{
    $response = $this->get('/');
    
    $response->assertStatus(200);
    
    // Check for key structural elements
    $html = $response->getContent();
    
    // Header present
    $this->assertStringContainsString('<header', $html);
    
    // Main content present
    $this->assertStringContainsString('<main', $html);
    
    // Footer present
    $this->assertStringContainsString('<footer', $html);
    
    // Starfield effect present
    $this->assertStringContainsString('id="stars"', $html);
}
```

**3. Card Grid Layout Test**:
```php
public function test_homepage_displays_feature_cards(): void
{
    $response = $this->get('/');
    
    $response->assertStatus(200);
    
    // Check for feature sections
    $response->assertSee('Browser Games');
    $response->assertSee('Coming Soon');
    
    // Verify multiple features present (implies grid layout)
    $html = $response->getContent();
    $featureCount = substr_count($html, 'class="feature"');
    
    $this->assertGreaterThan(2, $featureCount, 
        'Homepage should have at least 3 feature cards');
}
```

**4. Navigation and Footer Test**:
```php
public function test_homepage_has_navigation_and_footer(): void
{
    $response = $this->get('/');
    
    $response->assertStatus(200);
    
    // Navigation links
    $response->assertSee('Home');
    
    // Footer content
    $response->assertSee('© 2025 Ursa Minor Games');
    $response->assertSee('Built under the stars');
}
```

**5. Responsive Elements Test**:
```php
public function test_homepage_has_responsive_css(): void
{
    $response = $this->get('/');
    
    $response->assertStatus(200);
    
    // Check that stylesheet is loaded
    $html = $response->getContent();
    
    $this->assertStringContainsString('style.css', $html);
    $this->assertStringContainsString('script.js', $html);
}
```

### HTML/CSS Validation

**REQUIRED**: After UI changes, perform basic HTML/CSS validation.

#### HTML Structure Validation

**Manual Check** (quick):
1. View source at http://website.test/
2. Check for obvious malformed HTML:
   - Unclosed tags
   - Mismatched tags
   - Missing required attributes
3. Use browser DevTools Console - no HTML parse errors

**Automated Check** (test):
```php
public function test_homepage_html_is_well_formed(): void
{
    $response = $this->get('/');
    
    $html = $response->getContent();
    
    // Basic well-formedness checks
    $openDivs = substr_count($html, '<div');
    $closeDivs = substr_count($html, '</div>');
    $this->assertEquals($openDivs, $closeDivs, 'Mismatched div tags');
    
    $openSections = substr_count($html, '<section');
    $closeSections = substr_count($html, '</section>');
    $this->assertEquals($openSections, $closeSections, 'Mismatched section tags');
    
    // Check for common mistakes
    $this->assertStringNotContainsString('<div></div><div></div><div></div>', 
        $html, 'Suspicious empty div pattern');
}
```

#### CSS Validation

**Manual Check**:
1. Open DevTools → Console
2. Check for CSS errors/warnings
3. Verify styles are applied (Elements panel)
4. Check for unintended overrides

**Test for CSS Presence**:
```php
public function test_required_css_classes_exist(): void
{
    $response = $this->get('/');
    
    $html = $response->getContent();
    
    // Critical classes must be present
    $requiredClasses = [
        'hero',
        'feature',
        'section',
    ];
    
    foreach ($requiredClasses as $class) {
        $this->assertStringContainsString(
            "class=\"{$class}\"", 
            $html, 
            "Required class '{$class}' not found"
        );
    }
}
```

### Visual Regression Detection

**When to Check**:
- After any UI/CSS changes
- After updating dependencies
- After refactoring views
- Before deploying to production

**Visual Checklist**:
- [ ] Hero section displays correctly
- [ ] Logo is visible and properly sized
- [ ] Feature cards are in grid layout (not stacked oddly)
- [ ] Navigation is at top
- [ ] Footer is at bottom
- [ ] Colors match brand (night sky theme)
- [ ] Text is readable (proper contrast)
- [ ] No layout shifting or overlapping
- [ ] Responsive at 375px, 768px, 1920px widths

**If ANY visual issue found**: Fix it before proceeding.

### Regression Test Template

**Create this test when fixing a regression**:

```php
public function test_homepage_hero_layout_is_correct(): void
{
    // This test was added after homepage layout broke
    // It ensures hero section maintains proper 2-column layout
    
    $response = $this->get('/');
    
    $html = $response->getContent();
    
    // Hero container should exist
    $this->assertStringContainsString('class="hero"', $html);
    
    // Logo should be present
    $this->assertStringContainsString('bear.svg', $html);
    
    // Key content should be in order
    $response->assertSeeInOrder([
        'Ursa Minor Games',
        'Where games are born under the stars',
    ]);
    
    // Should not have obvious layout issues
    $this->assertStringNotContainsString('style="display:none"', $html);
}
```

**Document the regression**:
```php
/**
 * Test for Homepage Layout Regression (2025-01-12)
 * 
 * Issue: Hero section lost 2-column layout, icons oversized
 * Cause: Missing max-width and icon sizing in CSS
 * Fix: Added .section max-width and icon em-based sizing
 * 
 * This test ensures the layout remains correct after future changes.
 */
public function test_homepage_hero_maintains_layout(): void
{
    // Test implementation
}
```

## Content Guardrails

### Banned Terms Checker

Public-facing views must not contain certain terms when referring to future ambitions.

**Context**: It's okay to mention the café mission in "About" or internal docs, but public pages should focus on current offerings.

#### Restricted Terms in Public Views

❌ **Avoid in homepage/marketing content**:
- "café" (when referring to future plans)
- "storefront" (physical store)
- "shop" (physical location)
- "opening soon" (for café)
- "brick and mortar"

✅ **Acceptable Usage**:
```blade
{{-- About page: mission statement is okay --}}
<p>We're working toward opening a board game café in New Zealand.</p>

{{-- Internal docs: fine --}}
<!-- README.md can mention long-term goals -->
```

❌ **Avoid**:
```blade
{{-- Homepage --}}
<h2>Visit Our Café!</h2>
<p>Opening a storefront in 2026!</p>
```

#### Validation

When editing public views (`resources/views/pages/*`, `welcome.blade.php`):

1. Check for banned terms
2. If found, evaluate context
3. If about future plans, remove or rephrase
4. Focus on current/near-term offerings

**Automated Check** (future):
```php
// tests/Feature/ContentGuardrailsTest.php
public function test_public_views_do_not_mention_future_cafe_plans()
{
    $publicViews = [
        'resources/views/welcome.blade.php',
        'resources/views/pages/home.blade.php',
    ];
    
    $bannedTerms = ['café', 'storefront', 'shop opening'];
    
    foreach ($publicViews as $view) {
        $content = file_get_contents(base_path($view));
        
        foreach ($bannedTerms as $term) {
            $this->assertStringNotContainsString(
                $term,
                $content,
                "Public view {$view} should not mention '{$term}'"
            );
        }
    }
}
```

## Testing Standards

### Coverage Goals

**Target**: 80%+ code coverage
**Minimum**: All critical paths tested

**Coverage by Type**:
- Models: 90%+
- Services: 90%+
- Controllers: 80%+
- Livewire: 80%+
- Helpers: 100%

### Test Organization

```
tests/
├── Feature/
│   ├── Auth/
│   │   ├── LoginTest.php
│   │   └── RegistrationTest.php
│   ├── Games/
│   │   ├── SudokuGameTest.php
│   │   ├── Connect4GameTest.php
│   │   └── GameScoreTest.php
│   ├── Pages/
│   │   ├── HomePageTest.php
│   │   ├── AboutPageTest.php
│   │   └── GamesIndexTest.php
│   └── ExampleTest.php
└── Unit/
    ├── Models/
    │   ├── GameTest.php
    │   ├── UserTest.php
    │   └── ScoreTest.php
    ├── Services/
    │   ├── GameServiceTest.php
    │   └── ScoreCalculatorTest.php
    └── Helpers/
        └── StringHelperTest.php
```

### Naming Conventions

**Test Classes**:
- Suffix with `Test`
- Match class under test
- Examples: `GameTest.php`, `GameServiceTest.php`

**Test Methods**:
```php
// Use descriptive names
public function test_user_can_create_game()
public function test_game_requires_valid_name()
public function test_score_calculation_is_accurate()

// Or use pest-style
it('allows user to create game')
it('requires valid name for game')
it('calculates score accurately')
```

## PHPUnit Tests

### Basic Structure

```php
<?php

namespace Tests\Feature;

use App\Models\Game;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

class GameTest extends TestCase
{
    use RefreshDatabase;

    public function test_user_can_view_game_list(): void
    {
        // Arrange
        $games = Game::factory()->count(3)->create();

        // Act
        $response = $this->get(route('games.index'));

        // Assert
        $response->assertStatus(200);
        $response->assertViewHas('games');
        
        foreach ($games as $game) {
            $response->assertSee($game->name);
        }
    }

    public function test_user_can_create_game(): void
    {
        // Arrange
        $user = User::factory()->create(['role' => 'admin']);
        $gameData = [
            'name' => 'Test Game',
            'description' => 'This is a test game description.',
        ];

        // Act
        $response = $this->actingAs($user)
            ->post(route('games.store'), $gameData);

        // Assert
        $response->assertRedirect();
        $this->assertDatabaseHas('games', [
            'name' => 'Test Game',
        ]);
    }

    public function test_game_requires_valid_name(): void
    {
        // Arrange
        $user = User::factory()->create(['role' => 'admin']);

        // Act
        $response = $this->actingAs($user)
            ->post(route('games.store'), [
                'name' => '', // Invalid
                'description' => 'Description',
            ]);

        // Assert
        $response->assertSessionHasErrors('name');
    }
}
```

### Unit Tests

```php
<?php

namespace Tests\Unit\Services;

use App\Services\GameService;
use App\Models\Game;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

class GameServiceTest extends TestCase
{
    use RefreshDatabase;

    private GameService $gameService;

    protected function setUp(): void
    {
        parent::setUp();
        $this->gameService = new GameService();
    }

    public function test_calculates_score_correctly(): void
    {
        // Arrange
        $game = Game::factory()->create();
        $moves = 50;
        $time = 120.5;

        // Act
        $score = $this->gameService->calculateFinalScore($game, $moves, $time);

        // Assert
        $expectedScore = 1000 - (50 * 5) - (int)(120.5 * 2);
        $this->assertEquals($expectedScore, $score);
    }

    public function test_score_cannot_be_negative(): void
    {
        // Arrange
        $game = Game::factory()->create();
        $moves = 500; // Many moves
        $time = 1000; // Long time

        // Act
        $score = $this->gameService->calculateFinalScore($game, $moves, $time);

        // Assert
        $this->assertGreaterThanOrEqual(0, $score);
    }
}
```

## Livewire Testing

### Component Tests

```php
<?php

namespace Tests\Feature\Livewire;

use App\Livewire\Games\SudokuGame;
use App\Models\Game;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Livewire\Livewire;
use Tests\TestCase;

class SudokuGameTest extends TestCase
{
    use RefreshDatabase;

    public function test_component_renders_successfully(): void
    {
        $game = Game::factory()->create(['name' => 'Sudoku']);

        Livewire::test(SudokuGame::class, ['game' => $game])
            ->assertStatus(200)
            ->assertSee('Sudoku');
    }

    public function test_user_can_make_valid_move(): void
    {
        $game = Game::factory()->create();

        Livewire::test(SudokuGame::class, ['game' => $game])
            ->call('makeMove', 0, 0, 5)
            ->assertSet('moves', 1)
            ->assertSet('board.0.0', 5);
    }

    public function test_game_detects_completion(): void
    {
        $game = Game::factory()->create();

        $component = Livewire::test(SudokuGame::class, ['game' => $game]);
        
        // Simulate completing the puzzle
        // ... make moves ...
        
        $component->assertSet('isComplete', true);
    }

    public function test_user_can_reset_game(): void
    {
        $game = Game::factory()->create();

        Livewire::test(SudokuGame::class, ['game' => $game])
            ->call('makeMove', 0, 0, 5)
            ->assertSet('moves', 1)
            ->call('resetGame')
            ->assertSet('moves', 0)
            ->assertSet('isComplete', false);
    }
}
```

## Smoke Tests

### Requirement

Every public Blade view should have a basic smoke test.

**Smoke Test**: Minimal test that verifies the page loads without errors.

### Examples

```php
<?php

namespace Tests\Feature\Pages;

use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

class PageSmokeTest extends TestCase
{
    public function test_homepage_loads(): void
    {
        $response = $this->get('/');
        
        $response->assertStatus(200);
        $response->assertSee('Ursa Minor Games');
    }

    public function test_about_page_loads(): void
    {
        $response = $this->get('/about');
        
        $response->assertStatus(200);
    }

    public function test_games_index_loads(): void
    {
        $response = $this->get('/games');
        
        $response->assertStatus(200);
    }

    public function test_contact_page_loads(): void
    {
        $response = $this->get('/contact');
        
        $response->assertStatus(200);
    }
}
```

### When to Add Smoke Tests

**Always add when**:
- Creating new public page
- Adding new route
- Creating new Livewire component page

**Checklist**:
- [ ] Test returns 200 status
- [ ] Test sees key content (page title, heading)
- [ ] Test database queries don't break
- [ ] Test authentication requirements work

## Performance Guardrails

### Homepage Performance

**Rules**:
- No heavy images on homepage
- Prefer CSS solutions over images
- Lazy load below-fold content
- Minimize HTTP requests
- Optimize asset loading

#### Heavy Images Policy

❌ **Avoid on Homepage**:
```html
<!-- Don't use large background images -->
<div style="background-image: url('/images/space-background.jpg')">
```

✅ **Prefer CSS**:
```css
/* Use gradients instead */
.hero {
    background: linear-gradient(to bottom, #000000, #002d58);
}
```

✅ **If Images Needed**:
```html
<!-- Optimize and lazy load -->
<img 
    src="/images/optimized-hero.webp" 
    alt="Hero image"
    loading="lazy"
    width="1200"
    height="600"
>
```

#### CSS Solutions

**Prefer**:
- CSS gradients over gradient images
- SVG graphics over raster images
- CSS shapes over image shapes
- Icon fonts/SVG over icon images

**Examples**:
```css
/* Stars with CSS */
.star {
    width: 3px;
    height: 3px;
    border-radius: 50%;
    background: white;
    box-shadow: 
        100px 50px white,
        200px 150px white,
        300px 100px white;
}

/* Gradient backgrounds */
.hero {
    background: linear-gradient(135deg, #000000 0%, #002d58 100%);
}

/* CSS animations */
@keyframes blink {
    0%, 100% { opacity: 1; }
    50% { opacity: 0.3; }
}
```

### Performance Testing

```php
public function test_homepage_loads_in_reasonable_time(): void
{
    $start = microtime(true);
    
    $response = $this->get('/');
    
    $duration = microtime(true) - $start;
    
    $response->assertStatus(200);
    $this->assertLessThan(1.0, $duration, 'Homepage took too long to load');
}

public function test_homepage_has_minimal_database_queries(): void
{
    \DB::enableQueryLog();
    
    $this->get('/');
    
    $queries = \DB::getQueryLog();
    
    $this->assertLessThan(10, count($queries), 'Too many database queries on homepage');
}
```

## Test Doubles

### Factories

Use factories for model creation:

```php
<?php

namespace Database\Factories;

use App\Models\Game;
use Illuminate\Database\Eloquent\Factories\Factory;
use Illuminate\Support\Str;

class GameFactory extends Factory
{
    protected $model = Game::class;

    public function definition(): array
    {
        $name = $this->faker->words(3, true);
        
        return [
            'name' => ucfirst($name),
            'slug' => Str::slug($name),
            'description' => $this->faker->paragraph(),
            'status' => 'published',
            'is_active' => true,
        ];
    }

    public function draft(): static
    {
        return $this->state(fn (array $attributes) => [
            'status' => 'draft',
            'published_at' => null,
        ]);
    }

    public function inactive(): static
    {
        return $this->state(fn (array $attributes) => [
            'is_active' => false,
        ]);
    }
}
```

Usage:
```php
// Basic factory
$game = Game::factory()->create();

// With states
$draftGame = Game::factory()->draft()->create();

// Multiple
$games = Game::factory()->count(5)->create();

// With relationships
$game = Game::factory()
    ->has(Score::factory()->count(3))
    ->create();
```

### Mocking

```php
use Mockery;

public function test_external_api_call(): void
{
    // Mock external service
    $apiClient = Mockery::mock(ExternalApiClient::class);
    $apiClient->shouldReceive('fetchData')
        ->once()
        ->andReturn(['result' => 'success']);
    
    $this->app->instance(ExternalApiClient::class, $apiClient);
    
    // Test code that uses the API
    $response = $this->get('/api/data');
    
    $response->assertJson(['result' => 'success']);
}
```

## Test Database

### Setup

```php
<?php

namespace Tests;

use Illuminate\Foundation\Testing\TestCase as BaseTestCase;

abstract class TestCase extends BaseTestCase
{
    use CreatesApplication;

    protected function setUp(): void
    {
        parent::setUp();
        
        // Additional setup if needed
    }
}
```

### RefreshDatabase

Use `RefreshDatabase` trait for tests that interact with database:

```php
use Illuminate\Foundation\Testing\RefreshDatabase;

class GameTest extends TestCase
{
    use RefreshDatabase;

    public function test_example(): void
    {
        // Database is fresh for each test
    }
}
```

### Database Assertions

```php
// Assert exists
$this->assertDatabaseHas('games', [
    'name' => 'Test Game',
]);

// Assert missing
$this->assertDatabaseMissing('games', [
    'name' => 'Deleted Game',
]);

// Assert count
$this->assertDatabaseCount('games', 3);

// Assert soft deleted
$this->assertSoftDeleted('games', [
    'id' => $game->id,
]);
```

## Running Tests

### Commands

```bash
# Run all tests
php artisan test

# Run specific test
php artisan test --filter=GameTest

# Run with coverage
php artisan test --coverage

# Run specific directory
php artisan test tests/Feature

# Stop on failure
php artisan test --stop-on-failure

# Parallel testing
php artisan test --parallel
```

### PHPUnit

```bash
# Alternative: use PHPUnit directly
./vendor/bin/phpunit

# With coverage
./vendor/bin/phpunit --coverage-html coverage
```

## Continuous Testing

### Pre-Commit Checklist

Before committing:

- [ ] All tests pass: `php artisan test`
- [ ] No linter errors: `./vendor/bin/pint --test`
- [ ] No type errors (if using static analysis)
- [ ] New features have tests
- [ ] Coverage threshold maintained

### CI/CD Integration

For Railway deployment:

```yaml
# .github/workflows/tests.yml (future)
name: Tests

on: [push, pull_request]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.3
      - name: Install Dependencies
        run: composer install
      - name: Run Tests
        run: php artisan test
```

## Test-Driven Development (TDD)

### Recommended Approach

1. **Write failing test**
2. **Implement minimal code to pass**
3. **Refactor**
4. **Repeat**

### Example TDD Flow

```php
// Step 1: Write failing test
public function test_game_calculates_high_score(): void
{
    $game = Game::factory()->create();
    
    $this->assertEquals(1000, $game->calculateHighScore());
}

// Step 2: Implement
// app/Models/Game.php
public function calculateHighScore(): int
{
    return 1000; // Minimal implementation
}

// Step 3: Expand test
public function test_game_calculates_high_score_based_on_moves(): void
{
    $game = Game::factory()->create();
    
    $this->assertEquals(950, $game->calculateHighScore(10));
}

// Step 4: Refactor implementation
public function calculateHighScore(int $moves = 0): int
{
    return max(0, 1000 - ($moves * 5));
}
```

## Questions?

For testing concerns:
- Aim for 80%+ coverage
- Add smoke tests for all public pages
- Check for banned terms in public content
- Avoid heavy images on homepage
- Test before committing
- Follow TDD when possible
