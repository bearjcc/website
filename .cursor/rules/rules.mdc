---
description: "Schema and Structure for Cursor Rule Files"
alwaysApply: true
---

# Cursor Rule File Schema

This file defines the structure and conventions for all `.mdc` (Markdown Cursor) rule files in this project.

## Frontmatter Schema

All `.mdc` files MUST include YAML frontmatter with the following structure:

```yaml
---
description: "Brief description of what this rule file covers"
globs: "pattern1,pattern2,pattern3"  # Optional if alwaysApply is true
alwaysApply: true  # Optional, defaults to false
---
```

### Fields

**`description`** (required)
- Type: String
- Purpose: Short summary of the rule file's intent
- Format: One sentence, descriptive, starts with capital letter
- Example: `"Ursa Minor Games - Brand Guidelines and Design System"`

**`globs`** (optional, required if alwaysApply is false)
- Type: String (comma-separated patterns)
- Purpose: Defines which files this rule applies to
- Format: Standard glob patterns, comma-separated
- Examples:
  - `"resources/views/**/*.blade.php,public/**/*.css"`
  - `"app/Models/**/*,app/Livewire/**/*"`
  - `"**/*"` for project-wide rules

**`alwaysApply`** (optional)
- Type: Boolean
- Default: false
- Purpose: Forces rule to be in context regardless of current file
- Use for: Meta rules, location enforcement, core conventions

## File Organization

### Directory Structure

All rule files MUST live in `.cursor/rules/` or its subdirectories:

```
.cursor/
└── rules/
    ├── rules.mdc (this file)
    ├── cursor-rules-location.mdc
    ├── 001-core-project-conventions.mdc
    ├── 100-ui-ux-patterns.mdc
    ├── 200-domain-guidelines.mdc
    ├── 300-testing-and-guardrails.mdc
    └── ... (additional rules)
```

### Numbering Convention

Files are numbered to indicate priority and category:

- **No prefix**: Meta rules (schema, location) - always apply
- **001-0xx**: Core project conventions, architecture
- **100-1xx**: UI/UX patterns, frontend standards
- **200-2xx**: Domain logic, business rules, backend patterns
- **300-3xx**: Testing, quality assurance, guardrails
- **400-4xx**: Deployment, CI/CD, infrastructure
- **500-5xx**: Security, performance, optimization

### Naming Conventions

- Use kebab-case for file names
- Be descriptive and specific
- Start with number prefix for ordering
- Use `.mdc` extension (Markdown Cursor)
- Examples:
  - `001-core-project-conventions.mdc`
  - `100-ui-ux-patterns.mdc`
  - `210-livewire-components.mdc`

## Rule Content Structure

### Recommended Sections

Each rule file should follow this general structure:

```markdown
---
description: "Your description here"
globs: "your,globs,here"
---

# Rule Title

## Overview
Brief introduction to what this rule covers

## Critical Rules
- Most important rules listed first
- Use bullet points
- Be specific and actionable

## Guidelines
More detailed guidance organized by topic

### Subsection
- DO: Positive examples
- DON'T: Anti-patterns to avoid

## Examples
Code examples showing good and bad patterns

## Rationale
Why these rules exist (optional but helpful)
```

### Writing Style

- **Be concise**: Get to the point quickly
- **Be specific**: Use concrete examples
- **Be actionable**: Rules should be implementable
- **Be clear**: Avoid ambiguity
- **Use formatting**: 
  - Bold for emphasis: **MUST**, **NEVER**
  - Code blocks for examples
  - Lists for guidelines
  - Tables for reference data

### What to Include

✅ **DO Include**:
- Project-specific conventions
- Architectural decisions
- Code style requirements
- Design system rules
- Testing requirements
- Security guidelines
- Performance constraints
- Accessibility standards

❌ **DON'T Include**:
- General programming advice
- Language syntax tutorials
- Copy-pasted documentation
- Overly generic rules
- Redundant information

## Glob Pattern Guidelines

### Common Patterns

```yaml
# All files in project
globs: "**/*"

# Blade templates only
globs: "resources/views/**/*.blade.php"

# Multiple file types
globs: "resources/views/**/*,resources/js/**/*,public/**/*.css"

# Specific subdirectories
globs: "app/Models/**/*,app/Livewire/**/*"

# Test files
globs: "tests/**/*"
```

### Pattern Syntax

- `**` matches any directory depth
- `*` matches any file name
- `*.ext` matches files with specific extension
- `{js,css}` matches multiple extensions
- Comma-separated for multiple patterns

## Maintenance

### Updating Rules

- Keep rules synchronized with project evolution
- Update when architectural decisions change
- Remove obsolete rules
- Add new rules as needed
- Document major changes

### Review Cadence

- Review rules quarterly
- Update after major architecture changes
- Validate rules align with current practices
- Remove deprecated conventions

## Deprecated Files

The following files are deprecated:

- **`.cursorrules`** (root level) - Replaced by structured `.mdc` files in `.cursor/rules/`

## Questions?

When in doubt:
1. Look at existing `.mdc` files for examples
2. Follow the schema defined in this file
3. Keep rules specific to this project
4. Prioritize clarity and actionability
