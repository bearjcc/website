---
description: "Development workflow and best practices for Ursa Minor Games"
globs: "app/**/*.php,resources/views/**/*.blade.php,tests/**/*.php"
---

# Development Workflow

Project workflow and best practices for the Ursa Minor Games Laravel + TALL stack website.

## Project Context

- **Project**: Ursa Minor Games Website
- **Stack**: Laravel 12 + Vanilla HTML/CSS/JS
- **Future**: TALL Stack (Tailwind, Alpine.js, Laravel, Livewire)
- **Theme**: Night sky aesthetic with simple elegance
- **Priority**: Incremental features, tested locally, Railway compatible

## Essential Technologies

- **Laravel 12**: Backend framework with Eloquent ORM
- **Blade Templates**: Server-side rendering
- **Vanilla JavaScript**: Starfield animations, scroll effects
- **Custom CSS**: Night sky color palette and styling
- **Laravel Herd**: Local development at http://website.test/
- **Railway**: Production hosting with auto-deploy

## Key Development Principles

1. **Test Locally First**: Always test at http://website.test/ before committing
2. **Test Before Merge**: Definitely test before merging branches
3. **One Feature at a Time**: "Eat the elephant one bite at a time"
4. **Incremental Changes**: Small, focused commits
5. **Railway Compatibility**: Maintain deployment compatibility
6. **No Emoji**: Strictly prohibited in production code
7. **Brand Consistency**: Follow night sky theme guidelines

## Local Development Setup

### Running the Application

```powershell
# Start Laravel Herd (automatic)
# Navigate to http://website.test/

# Start Vite dev server (runs in background)
npm run dev

# Do NOT run build manually
# npm run build  # <- Don't do this
```

### Asset Management

- Images use Bootstrap Vite for cache busting
- Use `@images/` alias for imports
- Do NOT manually copy assets to public/
- Changes apply through dev server automatically

### Testing Workflow

1. Make code changes
2. View at http://website.test/
3. Test in multiple browsers
4. Test responsive design
5. Verify functionality works
6. Only then commit changes

## Common Development Patterns

### Blade Templates

- Use semantic HTML5 elements
- No inline JavaScript or CSS
- Use Blade components for reusable elements
- Follow proper heading hierarchy
- Include ARIA labels for accessibility

### CSS Organization

```css
/* ===== Section Name ===== */
/* Clear section comments */
/* Keep code organized and readable */
```

Sections:
- Base Styles
- Reset & Base Styles
- Scrollbar Styles
- Header & Navigation
- Logo & Branding
- Main Content
- Content Sections
- Footer
- Effects & Animations
- Layout Helpers

### JavaScript Structure

- Keep JavaScript modular
- Use clear, descriptive comments
- Separate files for different features:
  - `script.js`: Starfield animation
  - `scroll.js`: Header scroll behavior
- Use vanilla JavaScript (no jQuery)
- Plan for future Alpine.js integration

## File Organization Best Practices

### Public Assets
```
public/
  ├── style.css       # Main stylesheet
  ├── script.js       # Starfield animation
  ├── scroll.js       # Header scroll behavior
  └── *.svg          # Logo and assets
```

### Resources
```
resources/
  ├── views/
  │   └── *.blade.php # Blade templates
  ├── css/
  │   └── app.css    # Future Tailwind
  └── js/
      └── app.js     # Main JS entry
```

### Application
```
app/
  ├── Http/
  │   ├── Controllers/  # Thin controllers
  │   └── Middleware/   # Request filtering
  ├── Models/          # Eloquent models
  ├── Services/        # Business logic
  └── Providers/       # Service providers
```

## Development Process

### Starting a New Feature

1. **Create Feature Branch**
   ```powershell
   git checkout -b feature/descriptive-name
   ```

2. **Understand Requirements**
   - Root cause analysis
   - Understand problem and intent
   - Plan simple, maintainable solution

3. **Implement Incrementally**
   - One small change at a time
   - Test after each change
   - Verify in browser

4. **Test Thoroughly**
   - Test at http://website.test/
   - Check responsive design
   - Test in multiple browsers
   - Verify accessibility

5. **Commit with Conventional Format**
   ```powershell
   git add .
   git commit -m "feat(scope): description"
   ```

6. **Merge When Ready**
   - Final testing before merge
   - Merge to main
   - Automatic Railway deployment

### Bug Fix Process

1. **Identify Root Cause**
   - Don't make ad-hoc attempts
   - Systematic problem solving
   - Understand why bug exists

2. **Create Fix Branch**
   ```powershell
   git checkout -b fix/bug-description
   ```

3. **Implement Fix**
   - Minimal, targeted changes
   - Test fix works
   - Ensure no side effects

4. **Test Thoroughly**
   - Verify bug is fixed
   - Check for regressions
   - Test related functionality

5. **Commit and Merge**
   ```powershell
   git commit -m "fix(scope): description"
   ```

## Brand & Design Workflow

### Adding New Pages

1. **Follow Brand Guidelines**
   - Use night sky color palette
   - Apply Oswald font
   - Implement starfield effect if appropriate
   - Add backdrop blur to cards

2. **Maintain Consistency**
   - Check BRAND_GUIDELINES.md
   - Use existing component patterns
   - Ensure proper heading hierarchy
   - Test color contrast ratios

3. **Accessibility Checklist**
   - Semantic HTML
   - ARIA labels where needed
   - Keyboard navigation
   - Alt text for images
   - Proper contrast ratios

### CSS Changes

1. **Find Appropriate Section**
   - Locate relevant section comment
   - Add styles in logical location

2. **Follow Naming Conventions**
   - Use descriptive class names
   - Follow existing patterns
   - Keep specificity low

3. **Test Responsive Design**
   - Mobile (< 768px)
   - Tablet (768px - 1024px)
   - Desktop (> 1024px)

### JavaScript Changes

1. **Keep Modular**
   - Separate concerns into files
   - Use clear function names
   - Add descriptive comments

2. **Performance Considerations**
   - Optimize animations
   - Minimize DOM manipulation
   - Use event delegation

3. **Plan for Future**
   - Consider Alpine.js migration
   - Keep code maintainable
   - Document complex logic

## Testing Standards

### Manual Testing

- **Browser Testing**: Chrome, Firefox, Edge, Safari
- **Responsive Testing**: Mobile, tablet, desktop
- **Functionality Testing**: All features work as expected
- **Accessibility Testing**: Keyboard navigation, screen readers

### Automated Testing

- **Backend Tests**: PHPUnit for Laravel code
- **Aim for 80%+ coverage**
- **Test before commit**
- **Test before merge**

### Visual Testing

- **Color Contrast**: Check WCAG compliance
- **Typography**: Verify hierarchy and readability
- **Layout**: Check spacing and alignment
- **Animations**: Smooth and purposeful

## Railway Deployment

### Pre-Deployment Checklist

- [ ] All tests pass
- [ ] Tested locally at http://website.test/
- [ ] No secrets in code
- [ ] Environment variables configured
- [ ] Database migrations ready
- [ ] Assets compiled correctly

### Deployment Process

1. **Commit to Main**
   - Final testing complete
   - Conventional commit message
   - Push to main branch

2. **Automatic Deployment**
   - Railway detects push
   - Builds application
   - Deploys to production

3. **Post-Deployment**
   - Monitor for errors
   - Test production site
   - Verify functionality

### Rollback Procedure

- Railway allows rollback to previous deployment
- Keep main branch stable
- Test thoroughly before merging

## Common Tasks

### Adding a New Route

```php
// routes/web.php
Route::get('/new-page', function () {
    return view('new-page');
});
```

### Creating a New View

```blade
{{-- resources/views/new-page.blade.php --}}
<x-layout>
    <x-slot:title>Page Title - Ursa Minor Games</x-slot:title>
    
    <section class="section">
        <h1>Page Title</h1>
        <p>Content goes here...</p>
    </section>
</x-layout>
```

### Adding CSS Styles

```css
/* ===== New Section ===== */

.new-component {
    background: rgba(255, 255, 255, 0.05);
    border-radius: 10px;
    padding: 2rem;
    backdrop-filter: blur(5px);
}
```

## Collaboration Guidelines

### Code Review

- Focus on functionality
- Check brand consistency
- Verify Railway compatibility
- Ensure tests pass
- Review for simplicity

### Documentation

- Update README when needed
- Keep BRAND_GUIDELINES.md current
- Document complex features
- Use markdown for documentation

### Communication

- Clear commit messages
- Descriptive branch names
- Explain reasoning in PRs
- Ask questions when unclear

## Troubleshooting

### Common Issues

**Issue**: Changes not showing
- **Solution**: Clear browser cache, check Vite is running

**Issue**: 404 on routes
- **Solution**: Check routes/web.php, verify Laravel is running

**Issue**: Styles not applying
- **Solution**: Check CSS file path, verify asset compilation

**Issue**: Railway deployment fails
- **Solution**: Check logs, verify environment variables

### Getting Help

1. Check documentation
2. Review existing code
3. Search for similar implementations
4. Ask specific questions

## Best Practices Summary

- Test locally before committing
- Test before merging branches
- One feature at a time
- Follow brand guidelines
- No emoji in production
- Maintain Railway compatibility
- Use conventional commits
- Keep code simple and maintainable
- Document complex logic
- Focus on accessibility
