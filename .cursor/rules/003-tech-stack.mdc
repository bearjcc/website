---
description: "Technology stack and dependencies for Ursa Minor Games"
globs: "composer.json,package.json,vite.config.js"
---

# Technology Stack

Technology stack, dependencies, and tooling for Ursa Minor Games.

## Backend Stack

### Laravel 12.x

**Version**: 12.x (requires PHP 8.3+)

**Core Framework Features**:
- Eloquent ORM for database operations
- Blade templating engine
- Artisan command-line tool
- Built-in authentication system
- Migration system
- Service container and dependency injection

**When to Use**:
- All backend logic and business rules
- Database operations
- Server-side rendering with Blade
- API endpoints (future)
- Authentication and authorization

### PHP 8.3+

**Features Used**:
- Type declarations
- Readonly properties
- Named arguments
- Match expressions
- Attributes

**Code Standards**:
- Follow PSR-12 coding standards
- Use strict types: `declare(strict_types=1);`
- Implement proper type hints and return types
- Use Laravel Pint for code formatting

## Frontend Stack (Current)

### Vanilla HTML/CSS/JavaScript

**Current Approach**:
- Pure HTML5 semantic elements
- Custom CSS with night sky theme
- Vanilla JavaScript for animations
- No framework dependencies yet

**Why Vanilla First**:
- Simple and fast to implement
- No build complexity initially
- Easy to migrate to TALL stack later
- Performance-optimized from start

### Custom CSS

**File**: `public/style.css`

**Features**:
- Night sky color palette
- Oswald font family (Google Fonts)
- Backdrop blur effects
- Smooth transitions and animations
- Responsive design
- Scrollbar customization

**Organization**:
```css
/* ===== Base Styles ===== */
/* ===== Reset & Base Styles ===== */
/* ===== Scrollbar Styles ===== */
/* ===== Header & Navigation ===== */
/* ===== Logo & Branding ===== */
/* ===== Main Content ===== */
/* ===== Content Sections ===== */
/* ===== Footer ===== */
/* ===== Effects & Animations ===== */
/* ===== Layout Helpers ===== */
```

### Vanilla JavaScript

**Files**:
- `public/script.js`: Starfield animation
- `public/scroll.js`: Header scroll behavior

**Features**:
- Canvas-based starfield animation
- Smooth scroll effects
- DOM manipulation
- Event listeners
- No jQuery required

## Frontend Stack (Future)

### TALL Stack Components

**Target Stack**:
- **T**ailwind CSS: Utility-first styling
- **A**lpine.js: Lightweight reactive framework
- **L**aravel: Backend framework
- **L**ivewire: Server-side reactive components

**Migration Strategy**:
- Incremental adoption
- One component at a time
- Maintain backward compatibility
- Test thoroughly at each step

### Tailwind CSS

**When to Adopt**:
- After core features stabilize
- When styling complexity increases
- For rapid prototyping of new features

**Benefits**:
- Utility-first approach
- Consistent design tokens
- Built-in responsive design
- PurgeCSS for small bundles

### Alpine.js

**When to Adopt**:
- For interactive components
- To replace vanilla JavaScript gradually
- For reactive data binding
- For dropdown menus, modals, tabs

**Benefits**:
- Small bundle size (~15KB)
- Vue-like syntax
- No build step required
- Easy integration with Livewire

### Livewire

**When to Adopt**:
- For dynamic forms
- For real-time features
- For user authentication UI
- For interactive game features

**Benefits**:
- Server-side rendering
- No API endpoints needed
- Laravel-native
- Real-time capabilities

### Flux UI

**Version**: 2.x
**Package**: `livewire/flux`

**What It Is**:
- Premium UI component library for Livewire
- Built with Tailwind CSS
- Modern, accessible components
- Customizable to match brand themes

**Key Components**:
- Buttons and form inputs
- Cards and containers
- Modals and overlays
- Navigation elements
- Tables and data display
- Icons and graphics

**Usage**:
```blade
{{-- Flux button with custom styling --}}
<flux:button variant="primary" class="bg-star text-space-900">
    Play Now
</flux:button>

{{-- Flux card with glass effect --}}
<flux:card class="glass">
    <flux:heading>Game Title</flux:heading>
    <flux:text>Description goes here</flux:text>
</flux:card>
```

**Integration**:
- Installed via Composer
- Configured in `tailwind.config.js`
- Activated with `@fluxStyles` and `@fluxScripts`
- Customizable with Tailwind classes

**Theming with Flux**:
- Apply custom CSS classes to Flux components
- Use night sky colors: `text-ink`, `bg-space-900`, `border-constellation`
- Maintain glass effects: `backdrop-blur-md`, `bg-surface/5`
- Preserve brand buttons: Use `.btn-primary` and `.btn-secondary` classes

**When to Use**:
- For interactive forms and inputs
- For consistent component styling
- For accessible UI patterns
- For rapid prototyping
- When custom components would be complex

**When NOT to Use**:
- For simple HTML where custom CSS is sufficient
- When brand-specific styling is simpler without Flux
- For unique, one-off components
- When bundle size is critical

## Build Tools

### Vite

**Configuration**: `vite.config.js`

**Usage**:
```powershell
# Development (runs in background)
npm run dev

# Production build (automatic via Railway)
npm run build
```

**Features**:
- Hot module replacement (HMR)
- Fast cold start
- Asset optimization
- Image handling with cache busting

**Asset Handling**:
- Use `@images/` alias for imports
- Bootstrap Vite bundles assets
- Automatic cache busting
- Do NOT manually copy to public/

### Composer

**Configuration**: `composer.json`

**Key Dependencies**:
- `laravel/framework`: Core framework
- `livewire/livewire`: TALL stack reactive components
- `livewire/flux`: UI component library
- Laravel development tools

**Usage**:
```powershell
# Install dependencies
composer install

# Update dependencies
composer update

# Add new package
composer require vendor/package
```

### NPM

**Configuration**: `package.json`

**Key Dependencies**:
- Vite for builds
- Laravel Vite plugin
- Future: Tailwind CSS, Alpine.js

**Usage**:
```powershell
# Install dependencies
npm install

# Add new package
npm install --save package-name

# Development server
npm run dev
```

## Database

### SQLite (Development)

**File**: `database/database.sqlite`

**Usage**:
- Local development database
- Simple file-based storage
- No server required
- Perfect for Laravel Herd

**When to Use**:
- Local development
- Testing
- Simple applications

### PostgreSQL or MySQL (Production)

**Railway**:
- Managed database service
- Automatic backups
- Environment variable configuration
- Production-ready

**Configuration**:
- Set in `.env` file
- Never commit database credentials
- Use Railway environment variables

## Hosting & Deployment

### Laravel Herd (Local)

**URL**: http://website.test/

**Features**:
- Automatic PHP server
- Zero configuration
- Fast and lightweight
- Perfect for Laravel development

**Usage**:
- Automatically serves Laravel apps
- No manual server setup needed
- Just navigate to .test domain

### Railway (Production)

**Deployment**:
- Auto-deploy from main branch
- Git push triggers deployment
- Automatic builds with Nixpacks
- Environment variable management

**Configuration**:
- `nixpacks.toml`: Build configuration
- Environment variables in Railway dashboard
- Automatic HTTPS
- Custom domain support

**Requirements**:
- Maintain Railway compatibility
- Test before merging to main
- Use environment variables for config
- Never commit secrets

## Development Tools

### Laravel Pint

**Purpose**: Code formatting

**Usage**:
```powershell
# Format code
./vendor/bin/pint
```

**Configuration**: `pint.json`

### PHPUnit

**Purpose**: Backend testing

**Usage**:
```powershell
# Run tests
php artisan test
```

**Configuration**: `phpunit.xml`

**Standards**:
- Aim for 80%+ coverage
- Test before commit
- Test before merge

## Asset Management

### Current System

**Vite + Laravel Mix**:
- Images via Bootstrap Vite
- Cache busting automatic
- Use `@images/` alias
- Do NOT manually copy to public/

**File Organization**:
```
public/
  ├── style.css       # Main stylesheet (direct)
  ├── script.js       # Starfield (direct)
  ├── scroll.js       # Scroll effects (direct)
  └── build/          # Vite build output

resources/
  ├── css/
  │   └── app.css    # Future Tailwind entry
  └── js/
      └── app.js     # Future JS entry
```

### Future System

**Full Vite Integration**:
- All CSS through Vite
- All JavaScript through Vite
- Optimized builds
- Tree shaking
- Code splitting

## Icon Systems

### Heroicons (Recommended)

**URL**: https://heroicons.com

**Usage**:
- Free and open source
- SVG icons
- Outline and solid styles
- Blade Heroicons package available

**When to Use**:
- UI icons
- Navigation icons
- Action buttons
- Feature indicators

### Custom SVG

**Assets**:
- `public/bear.svg`: Logo
- Future custom icons

**Guidelines**:
- Keep simple and minimal
- Use monochrome (white) for night sky theme
- Optimize SVG files
- Use semantic naming

## Font System

### Google Fonts - Oswald

**Import**: Via `<link>` in HTML

**Weights**: 200, 300, 400, 500, 600, 700

**Usage**:
```css
font-family: 'Oswald', sans-serif;
```

**Guidelines**:
- Use for all text
- Maintain weight hierarchy
- Don't use weights below 300 for body text
- Use 700 for headings

## Version Control

### Git

**Branch Strategy**:
- `main`: Production (auto-deploys to Railway)
- `feature/*`: New features
- `fix/*`: Bug fixes
- `docs/*`: Documentation updates

**Commit Format**: Conventional Commits
```
feat(scope): description
fix(scope): description
docs(scope): description
```

## Security Dependencies

### Laravel Built-in Security

- CSRF protection
- XSS protection
- SQL injection prevention
- Password hashing (Bcrypt)
- Encryption

### Best Practices

- Never commit .env file
- Use environment variables
- Validate all user input
- Sanitize output
- Keep dependencies updated
- Use HTTPS in production

## Performance Optimization

### Current Optimizations

- Minimal JavaScript
- Optimized CSS
- Efficient animations
- Lazy loading (future)

### Future Optimizations

- Image optimization
- Code splitting with Vite
- Caching strategies
- CDN for static assets
- Database query optimization

## Browser Compatibility

### Target Browsers

- Chrome (latest 2 versions)
- Firefox (latest 2 versions)
- Safari (latest 2 versions)
- Edge (latest 2 versions)

### Testing

- Manual testing in all browsers
- Responsive design testing
- Mobile device testing
- Accessibility testing

## Monitoring & Debugging

### Development

- Laravel Debugbar (optional)
- Browser DevTools
- Vite HMR overlay
- Laravel Log Viewer

### Production

- Railway logs
- Laravel error logging
- Application monitoring
- Performance monitoring

## Package Management Strategy

### PHP Packages

**When to Add**:
- Laravel-native solutions preferred
- Well-maintained packages
- Security considerations
- Performance impact

**Process**:
```powershell
composer require vendor/package
composer update
# Test thoroughly
git commit -m "chore(deps): add package-name"
```

### JavaScript Packages

**When to Add**:
- Vanilla JS solutions first
- Consider bundle size
- Maintenance status
- Security vulnerabilities

**Process**:
```powershell
npm install package-name
# Test thoroughly
git commit -m "chore(deps): add package-name"
```

## Future Integrations

### Planned

- User authentication system
- Game engines for browser games
- Real-time features (Laravel Reverb)
- API for mobile apps
- WebSocket support

### Considerations

- Maintain Railway compatibility
- One feature at a time
- Test locally before commit
- Incremental rollout
- Monitor performance impact

## Documentation Resources

### Official Documentation

- Laravel: https://laravel.com/docs
- PHP: https://www.php.net/docs.php
- Vite: https://vitejs.dev
- Railway: https://docs.railway.app

### Design Resources

- Heroicons: https://heroicons.com
- Google Fonts: https://fonts.google.com
- Can I Use: https://caniuse.com

### Learning Resources

- Laravel Bootcamp
- Laracasts
- Laravel News
- PHP The Right Way

## Dependency Update Strategy

### Regular Updates

- Check for security updates weekly
- Update minor versions monthly
- Test thoroughly after updates
- Document breaking changes

### Process

```powershell
# Check for updates
composer outdated
npm outdated

# Update dependencies
composer update
npm update

# Test everything
php artisan test
# Manual browser testing

# Commit if all tests pass
git commit -m "chore(deps): update dependencies"
```

## Stack Evolution Timeline

### Phase 1 (Current)
- Laravel 12 + Vanilla HTML/CSS/JS
- Core website features
- Brand identity established

### Phase 2 (Near Future)
- Add Tailwind CSS
- Integrate Alpine.js
- Begin Livewire components

### Phase 3 (Future)
- Full TALL stack
- Interactive features
- User authentication
- Game integrations

### Phase 4 (Long-term)
- Advanced features
- Mobile apps
- Real-time capabilities
- Community features
