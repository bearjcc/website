---
description: "Code quality and style standards for Ursa Minor Games"
globs: "app/**/*.php,resources/views/**/*.blade.php,public/**/*.{js,css}"
---

# Code Quality Standards

Code quality, style, and documentation standards for Ursa Minor Games.

## PHP Standards

### PSR-12 Coding Style

Follow PSR-12 coding standards for all PHP code:

```php
<?php

declare(strict_types=1);

namespace App\Services;

use App\Models\Game;
use Illuminate\Support\Collection;

class GameService
{
    public function __construct(
        private readonly GameRepository $repository
    ) {}
    
    public function getActiveGames(): Collection
    {
        return $this->repository->findActive();
    }
    
    public function createGame(array $data): Game
    {
        $this->validateGameData($data);
        
        return $this->repository->create($data);
    }
    
    private function validateGameData(array $data): void
    {
        // Validation logic
    }
}
```

### Type Declarations

**Always use type declarations**:

```php
<?php

// ✅ DO - Use type declarations
public function createGame(array $data): Game
{
    // Implementation
}

// ❌ DON'T - Skip type declarations
public function createGame($data)
{
    // Implementation
}
```

### Strict Types

Use strict types at the top of every PHP file:

```php
<?php

declare(strict_types=1);

namespace App\Services;
```

### Laravel Pint

Use Laravel Pint for automatic code formatting:

```powershell
# Format all files
./vendor/bin/pint

# Format specific file
./vendor/bin/pint app/Services/GameService.php

# Check without fixing
./vendor/bin/pint --test
```

**Configuration**: `pint.json`

```json
{
    "preset": "laravel",
    "rules": {
        "declare_strict_types": true
    }
}
```

## Code Organization

### File Structure

**Namespace and Imports**:
```php
<?php

declare(strict_types=1);

namespace App\Services;

// Group imports logically
use App\Models\Game;
use App\Models\User;
use App\Repositories\GameRepository;
use Illuminate\Support\Collection;
use Illuminate\Support\Facades\Log;

class GameService
{
    // Implementation
}
```

### Class Structure

```php
<?php

class GameService
{
    // 1. Constants
    private const MAX_GAMES = 100;
    
    // 2. Properties
    private GameRepository $repository;
    
    // 3. Constructor
    public function __construct(GameRepository $repository)
    {
        $this->repository = $repository;
    }
    
    // 4. Public methods
    public function getGames(): Collection
    {
        return $this->repository->all();
    }
    
    // 5. Protected methods
    protected function validateGame(Game $game): bool
    {
        return true;
    }
    
    // 6. Private methods
    private function logGameAction(string $action): void
    {
        Log::info($action);
    }
}
```

### Method Size

**Keep methods small and focused**:

```php
// ❌ DON'T - Long methods
public function processGame($id)
{
    // 100 lines of code...
}

// ✅ DO - Small, focused methods
public function processGame(int $id): void
{
    $game = $this->findGame($id);
    $this->validateGame($game);
    $this->executeGameLogic($game);
    $this->saveGame($game);
}

private function findGame(int $id): Game
{
    return Game::findOrFail($id);
}

private function validateGame(Game $game): void
{
    // Validation logic
}
```

## Naming Conventions

### Classes

```php
// Controllers
GameController
UserController

// Models
Game
User
GameScore

// Services
GameService
UserAuthenticationService

// Repositories
GameRepository
UserRepository

// Requests
StoreGameRequest
UpdateUserRequest

// Jobs
ProcessGameData
SendGameNotification
```

### Methods

```php
// Actions - verbs
public function createGame(array $data): Game
public function updateScore(int $gameId, int $score): void
public function deleteGame(int $id): bool

// Queries - get/find/is/has
public function getActiveGames(): Collection
public function findGameById(int $id): ?Game
public function isGameActive(Game $game): bool
public function hasPermission(User $user): bool
```

### Variables

```php
// Use descriptive names
$activeGames = Game::active()->get();
$userScore = $user->calculateScore();
$isGameComplete = $game->isComplete();

// ❌ DON'T - Single letter or unclear
$g = Game::find(1);
$x = $user->score();
$flag = $game->status === 'complete';
```

## Documentation

### PHPDoc Comments

```php
<?php

/**
 * Service for managing game operations.
 */
class GameService
{
    /**
     * Create a new game with the given data.
     *
     * @param  array  $data  The game data
     * @return Game  The created game
     * @throws GameCreationException  If game creation fails
     */
    public function createGame(array $data): Game
    {
        // Implementation
    }
    
    /**
     * Get all active games.
     *
     * @return Collection<int, Game>
     */
    public function getActiveGames(): Collection
    {
        return Game::active()->get();
    }
}
```

### Inline Comments

```php
// ✅ DO - Explain why, not what
// Eager load user to prevent N+1 queries
$games = Game::with('user')->get();

// Cache for 1 hour because game list rarely changes
$games = Cache::remember('active_games', 3600, fn() => Game::active()->get());

// ❌ DON'T - State the obvious
// Get games
$games = Game::all();

// Loop through games
foreach ($games as $game) {
    // Process game
}
```

### Complex Logic

Document complex algorithms or business rules:

```php
/**
 * Calculate game score based on multiple factors.
 * 
 * Score calculation:
 * - Base score: time_taken * difficulty_multiplier
 * - Bonus: achievements * 100
 * - Penalty: mistakes * -50
 * - Final score cannot be negative
 */
public function calculateScore(Game $game): int
{
    $baseScore = $game->time_taken * $game->difficulty_multiplier;
    $bonus = $game->achievements * 100;
    $penalty = $game->mistakes * -50;
    
    return max(0, $baseScore + $bonus + $penalty);
}
```

## SOLID Principles

### Single Responsibility

```php
// ❌ DON'T - Class doing too much
class Game
{
    public function save() {}
    public function validate() {}
    public function sendNotification() {}
    public function generateReport() {}
}

// ✅ DO - Separate responsibilities
class Game
{
    public function save() {}
}

class GameValidator
{
    public function validate(Game $game): bool {}
}

class GameNotificationService
{
    public function notify(Game $game): void {}
}

class GameReportGenerator
{
    public function generate(Game $game): Report {}
}
```

## Frontend Code Standards

### HTML/Blade

```blade
{{-- ✅ DO - Semantic HTML --}}
<header class="site-header">
    <nav class="primary-nav">
        <ul>
            <li><a href="{{ route('home') }}">Home</a></li>
            <li><a href="{{ route('games') }}">Games</a></li>
        </ul>
    </nav>
</header>

{{-- ❌ DON'T - Div soup --}}
<div class="header">
    <div class="nav">
        <div class="list">
            <div class="item"><div class="link">Home</div></div>
        </div>
    </div>
</div>
```

### CSS

```css
/* ✅ DO - Organized, commented, descriptive */

/* ===== Header & Navigation ===== */

.site-header {
    position: sticky;
    top: 0;
    background: linear-gradient(to bottom, #000000, #001a33);
    transition: all 1s ease;
}

.site-header.scrolled {
    padding: 1rem 0;
}

.primary-nav ul {
    display: flex;
    gap: 2rem;
    list-style: none;
}
```

### JavaScript

```javascript
'use strict';

/**
 * Initialize starfield animation
 * Creates random stars with blinking effect
 */
function initStarfield() {
    const canvas = document.getElementById('starfield');
    const ctx = canvas.getContext('2d');
    const stars = [];
    
    // Set canvas size to viewport
    function resizeCanvas() {
        canvas.width = window.innerWidth;
        canvas.height = window.innerHeight;
    }
    
    // Create stars based on viewport size
    function createStars() {
        const starCount = Math.floor((canvas.width * canvas.height) / 10000);
        
        for (let i = 0; i < starCount; i++) {
            stars.push(createStar());
        }
    }
    
    // Initialize
    resizeCanvas();
    createStars();
    animate();
}

// Initialize when DOM is ready
document.addEventListener('DOMContentLoaded', initStarfield);
```

## Code Review Checklist

Before committing code:

### PHP

- [ ] Follows PSR-12 standards
- [ ] Uses strict types
- [ ] Has type declarations
- [ ] Formatted with Laravel Pint
- [ ] No obvious security issues
- [ ] Proper error handling
- [ ] Descriptive variable names
- [ ] Methods are small and focused
- [ ] Has tests

### Blade/HTML

- [ ] Uses semantic HTML
- [ ] No inline styles or scripts
- [ ] Proper escaping ({{ }})
- [ ] Accessible (ARIA labels, alt text)
- [ ] No emoji in production code

### CSS

- [ ] Follows brand guidelines
- [ ] Well organized with comments
- [ ] Uses night sky colors only
- [ ] Responsive design
- [ ] No purple or off-brand colors

### JavaScript

- [ ] Modern JavaScript (ES6+)
- [ ] Well commented
- [ ] No console.log in production
- [ ] Proper error handling
- [ ] Performance optimized

## Common Code Smells

### Avoid

- **God Classes**: Classes that do too much
- **Long Methods**: Methods over 20 lines
- **Deep Nesting**: More than 3 levels
- **Magic Numbers**: Use constants instead
- **Duplicate Code**: Extract to methods
- **Large Classes**: Split into smaller classes
- **Long Parameter Lists**: Use DTOs or arrays
- **Dead Code**: Remove unused code

## Refactoring

### When to Refactor

- Before adding new features
- When fixing bugs
- During code review
- When code smells detected
- When tests are hard to write

### How to Refactor

1. Ensure tests exist
2. Make small changes
3. Run tests after each change
4. Commit incrementally
5. Document significant changes

## Tools

### Laravel Pint

```powershell
# Format code
./vendor/bin/pint

# Check formatting
./vendor/bin/pint --test
```

### PHPUnit

```powershell
# Run tests
php artisan test

# Run specific test
php artisan test --filter=GameManagementTest

# Run with coverage
php artisan test --coverage
```

## Best Practices Summary

### DO

- ✅ Follow PSR-12 standards
- ✅ Use type declarations
- ✅ Write tests
- ✅ Keep methods small
- ✅ Use descriptive names
- ✅ Document complex logic
- ✅ Handle errors properly
- ✅ Follow SOLID principles
- ✅ Use Laravel's built-in features
- ✅ Format with Laravel Pint

### DON'T

- ❌ Skip type declarations
- ❌ Write long methods
- ❌ Use single-letter variables
- ❌ Skip tests
- ❌ Ignore security
- ❌ Put logic in views
- ❌ Use emoji in production
- ❌ Skip error handling
- ❌ Reinvent the wheel
- ❌ Ignore code smells
